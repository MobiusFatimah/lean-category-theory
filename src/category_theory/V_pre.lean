import category_theory.sheaves
import analysis.topology.topological_structures
import category_theory.examples.categories

universes u v

open category_theory
open category_theory.examples

-- TODO redefine open_set so it is parametrised by the bundled Top?

-- Do I dare define `open_set` as a functor from Top to CAT? I don't like CAT.

def map_open_set
  {X Y : Top} (f : X ‚ü∂ Y) : open_set Y.Œ± ‚•§ open_set X.Œ± :=
{ obj := Œª U, ‚ü® f.val ‚Åª¬π' U.s, 
    begin apply f.property, exact U.is_open, end ‚ü©,
  map' := Œª U V i, 
    begin 
      dsimp at i, 
      split, 
      split, 
      tactic.intros1, 
      dsimp at a_1, 
      dsimp,
      have p := i.down.down,
      dsimp [(‚â§), preorder.le, (‚äÜ), set.subset] at p,
      apply p,
      assumption
    end }.

structure TopRing :=
{Œ≤ : Type u}
[Ring : comm_ring Œ≤]
[Top : topological_space Œ≤]
[TopRing : topological_ring Œ≤]

instance TopRing_comm_ring (R : TopRing) : comm_ring R.Œ≤ := R.Ring
instance TopRing_topological_space (R : TopRing) : topological_space R.Œ≤ := R.Top
instance TopRing_topological_ring (R : TopRing) : topological_ring R.Œ≤ := R.TopRing

instance : category TopRing :=
{ hom   := Œª R S, {f : R.Œ≤ ‚Üí S.Œ≤ // is_ring_hom f ‚àß continuous f },
  id    := Œª R, ‚ü®id, by obviously‚ü©,
  comp  := Œª R S T f g, ‚ü®g.val ‚àò f.val, 
    begin -- TODO automate
      cases f, cases g, cases f_property, cases g_property, split, 
      dsimp, resetI, apply_instance, 
      dsimp, apply continuous.comp ; assumption  
    end‚ü© }

variables (C : Type u) [ùíû : category.{u v} C]
include ùíû

structure Presheaf :=
(X : Top)
(ùí™ : presheaf (open_set X.Œ±) C)

variables {C}

instance Presheaf_topological_space (F : Presheaf.{u v} C) : topological_space F.X.Œ± := F.X.str 

structure Presheaf_hom (F G : Presheaf.{u v} C) :=
(f : F.X ‚ü∂ G.X)
(c : G.ùí™ ‚üπ (((map_open_set f).op) ‚ãô F.ùí™))

@[extensionality] lemma ext {F G : Presheaf.{u v} C} (Œ± Œ≤ : Presheaf_hom F G)
  (w : Œ±.f = Œ≤.f) (h : Œ±.c == Œ≤.c)
  : Œ± = Œ≤ :=
begin
  cases Œ±, cases Œ≤,
  dsimp at w,
  subst w,
  congr,
  dsimp at h,
  exact eq_of_heq h,
end


namespace Presheaf_hom
def id (F : Presheaf.{u v} C) : Presheaf_hom F F :=
{ f := ùüô F.X,
  c := 
  { app := Œª U, category_theory.functor.map _ (ùüô U), 
    naturality' := 
    begin 
      intros, 
      cases X, cases Y, 
      dsimp,
      -- FIXME why can't rewrite_search take us from here?
      erw category_theory.functor.map_id,
      erw category_theory.functor.map_id,
      erw category.comp_id,
      erw category.id_comp,
      cases f, cases f,
      refl,      
    end } -- That was horrific.
}

def comp {F G H : Presheaf.{u v} C} (Œ± : Presheaf_hom F G) (Œ≤ : Presheaf_hom G H) : Presheaf_hom F H :=
{ f := Œ±.f ‚â´ Œ≤.f,
  c := Œ≤.c ‚äü (whisker_on_left (map_open_set Œ≤.f).op Œ±.c), 
}
end Presheaf_hom


instance : category (Presheaf.{u v} C) :=
{ hom := Presheaf_hom,
  id := Presheaf_hom.id,
  comp := @Presheaf_hom.comp C _,
  comp_id' := Œª X Y f,
    begin 
      dsimp [Presheaf_hom.id, Presheaf_hom.comp, map_open_set, whisker_on_left, whiskering_on_left], 
      ext,
      dsimp,
      simp,
      dsimp,
      simp,
      ext,
      dsimp [functor.op],
      cases X_1,
      erw category_theory.functor.map_id,
      erw category.id_comp,
      dsimp,
      simp,
      sorry
      -- refl,
    end,
  id_comp' := Œª X Y f, sorry,
    -- begin 
    --   dsimp [Presheaf_hom.id, Presheaf_hom.comp, map_open_set], 
    --   ext, 
    --   dsimp [map_open_set],
    --   simp,
    --   dsimp,
    --   cases f,
    --   dsimp,
    --   simp,
    --   ext,
    --   dsimp,
    --   erw category.comp_id,
    -- end,
  assoc' := Œª W X Y Z f g h, sorry,
  -- begin
  --   ext,
  --   dsimp [Presheaf_hom.comp, map_open_set, functor.op], 
  --   simp,
  --   dsimp [Presheaf_hom.comp, map_open_set, functor.op], 
  --   cases f, cases g, cases h,
  --   dsimp,
  --   simp,
  --   funext,
  --   erw category.comp_id,
  --   erw category.comp_id,
  --   erw category.id_comp,
  -- end
}