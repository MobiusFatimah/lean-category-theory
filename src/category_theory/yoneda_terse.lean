import category_theory.follow_your_nose

universes u‚ÇÅ v‚ÇÅ

open category_theory

namespace terse

variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

def yoneda : C ‚•§ ((C·µí·µñ) ‚•§ (Type v‚ÇÅ)) := ∆õ X, ∆õ Y : C, Y ‚ü∂ X.

def yoneda_evaluation : ((C·µí·µñ) √ó ((C·µí·µñ) ‚•§ (Type v‚ÇÅ))) ‚•§ (Type (max u‚ÇÅ v‚ÇÅ)) :=
(evaluation_uncurried (C·µí·µñ) (Type v‚ÇÅ)) ‚ãô ulift_functor.{v‚ÇÅ u‚ÇÅ}

@[simp] lemma yoneda_evaluation_map_down
  (P Q : (C·µí·µñ) √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (x : (yoneda_evaluation C).obj P) :
  ((yoneda_evaluation C).map Œ± x).down = (Œ±.2).app (Q.1) ((P.2).map (Œ±.1) (x.down)) := rfl

def yoneda_pairing : ((C·µí·µñ) √ó ((C·µí·µñ) ‚•§ (Type v‚ÇÅ))) ‚•§ (Type (max u‚ÇÅ v‚ÇÅ)) :=
let F := (functor.prod ((yoneda C).op) (functor.id ((C·µí·µñ) ‚•§ (Type v‚ÇÅ)))) in
let G := (functor.hom ((C·µí·µñ) ‚•§ (Type v‚ÇÅ))) in
  (F ‚ãô G)

@[simp] lemma yoneda_pairing_map
  (P Q : (C·µí·µñ) √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (yoneda_pairing C).obj P) :
  (yoneda_pairing C).map Œ± Œ≤ = (yoneda C).map (Œ±.1) ‚â´ Œ≤ ‚â´ Œ±.2 := rfl

def yoneda_lemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C) := 
{ hom := { app := Œª F x, ulift.up ((x.app F.1) (ùüô F.1)) },
  inv := { app := Œª F x, { app := Œª X a, (F.2.map a) x.down } } }.

end terse