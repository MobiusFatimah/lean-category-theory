-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.products
import category_theory.equivalence

open category_theory

namespace category_theory.prod

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ
variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [ùíü : category.{u‚ÇÇ v‚ÇÇ} D] (E : Type u‚ÇÉ) [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]
include ùíû ùíü ‚Ñ∞

local attribute [tidy] tactic.assumption

def associator : ((C √ó D) √ó E) ‚•§ (C √ó (D √ó E)) := by tidy
-- { obj := Œª X, (X.1.1, (X.1.2, X.2)),
--   map := Œª _ _ f, (f.1.1, (f.1.2, f.2)) }

-- @[simp] lemma associator_obj (X) : (associator C D E) X = (X.1.1, (X.1.2, X.2)) := rfl
-- @[simp] lemma associator_map {X Y} (f : X ‚ü∂ Y) : (associator C D E).map f = (f.1.1, (f.1.2, f.2)) := rfl

def inverse_associator : (C √ó (D √ó E)) ‚•§ ((C √ó D) √ó E) := by tidy
-- { obj := Œª X, ((X.1, X.2.1), X.2.2),
--   map := Œª _ _ f, ((f.1, f.2.1), f.2.2) }

-- @[simp] lemma inverse_associator_obj (X) : (inverse_associator C D E) X = ((X.1, X.2.1), X.2.2) := rfl
-- @[simp] lemma inverse_associator_map {X Y} (f : X ‚ü∂ Y) : (inverse_associator C D E).map f = ((f.1, f.2.1), f.2.2) := rfl

local attribute [back] category.id

def associativity : equivalence ((C √ó D) √ó E) (C √ó (D √ó E)) := --by obviously -- times out
{ functor := associator C D E,
  inverse := inverse_associator C D E, }

-- TODO pentagon natural transformation? satisfying?

end category_theory.prod
