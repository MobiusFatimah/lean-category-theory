-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.natural_transformation
import category_theory.functor_category
import .tactics.obviously

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

open category_theory

namespace category_theory.arrows

local attribute [back] category.id -- This says that whenever there is a goal of the form C.Hom X X, we can safely complete it with the identity morphism. This isn't universally true.

-- Is there any point defining these separately (rather than as the functor category from the walking arrow)?

variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

def arrow := Œ£ (p : C √ó C), p.1 ‚ü∂ p.2

variable {C}

structure arrow_hom (X Y : arrow C) :=
(morphism : (X.1.1 ‚ü∂ Y.1.1) √ó (X.1.2 ‚ü∂ Y.1.2))
(commutativity' : morphism.1 ‚â´ Y.2 = X.2 ‚â´ morphism.2 . obviously)

restate_axiom arrow_hom.commutativity'
attribute [ematch] arrow_hom.commutativity

@[extensionality] lemma ext {f g : arrow C} {Œ± Œ≤ : arrow_hom f g} (w : Œ±.morphism = Œ≤.morphism) : Œ± = Œ≤ :=
begin
  induction Œ± with Œ±_morphism,
  induction Œ≤ with Œ≤_morphism,
  tidy,
end

instance : category (arrow C):=
{ hom  := arrow_hom,
  id   := by obviously,
  comp := Œª X Y Z f g, ‚ü® (f.morphism.1 ‚â´ g.morphism.1, f.morphism.2 ‚â´ g.morphism.2) ‚ü© }

@[simp] lemma arrow_comp {X Y Z : arrow C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : f ‚â´ g = ‚ü® (f.morphism.1 ‚â´ g.morphism.1, f.morphism.2 ‚â´ g.morphism.2) ‚ü© := rfl

end category_theory.arrows

namespace category_theory.functor

open category_theory.arrows

variables {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{u‚ÇÇ v‚ÇÇ} D]

-- TODO loops?
-- def map_arrows : (C ‚Üù D) ‚Üù ((arrow C) ‚Üù (arrow D)) := 
-- { obj := Œª F,     { obj := Œª X, ‚ü® (F X.1.1, F X.1.2), F.map X.2 ‚ü©,
--                     map' := Œª X Y f, ‚ü® (F.map f.morphism.1, F.map f.morphism.2) ‚ü© },
--   map' := Œª F G œÑ, { app := Œª X, ‚ü® (œÑ X.1.1, œÑ X.1.2) ‚ü© } }

end category_theory.functor

