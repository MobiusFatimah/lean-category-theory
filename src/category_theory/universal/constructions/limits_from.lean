-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.universal.limits
import category_theory.walking

open category_theory
open category_theory.walking

namespace category_theory.universal

universes u‚ÇÅ v‚ÇÅ
variables {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C]

instance [has_products.{u‚ÇÅ v‚ÇÅ} C] [has_equalizers.{u‚ÇÅ v‚ÇÅ} C] : has_limits.{u‚ÇÅ v‚ÇÅ} C := 
{ limit := Œª J ùí• F,
    begin
    resetI,
    let Œ≤_obj := (Œª j : J, F j),
    let Œ≤_hom := (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), F f.1.2),
    let pi_obj := pi Œ≤_obj,
    let pi_hom := pi Œ≤_hom,
    let s : pi_obj ‚ü∂ pi_hom := pi.of_components (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ Œ≤_obj f.1.1 ‚â´ F.map f.2),
    let t : pi_obj ‚ü∂ pi_hom := pi.of_components (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ Œ≤_obj f.1.2),
    exact { X := equalizer s t,
            œÄ := Œª j, equalizer.Œπ s t ‚â´ pi.œÄ Œ≤_obj j,
            w := sorry
    }
    end,
  is_limit := Œª J ùí• F, 
    begin resetI, exact
    { lift := Œª c, begin 
                     fapply equalizer.lift,
                     fapply pi.of_components,
                     intro j,
                     exact c.œÄ j,
                     sorry,
                   end, 
      fac := sorry, 
      uniq := sorry }
    end
}

end category_theory.universal