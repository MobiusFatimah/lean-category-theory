import category_theory.universal.limits
import category_theory.universal.colimits
import category_theory.universal.limits.limits

universe u

open category_theory category_theory.universal

namespace category_theory.universal.types

local attribute [forward] fork.w square.w

instance : has_terminal_object.{u+1 u} (Type u) :=
{ terminal := punit }

instance : has_binary_products.{u+1 u} (Type u) := 
{ prod := Œª Y Z, { X := Y √ó Z, œÄ‚ÇÅ := prod.fst, œÄ‚ÇÇ := prod.snd } }

@[simp] lemma types_prod (Y Z : Type u) : universal.prod Y Z = (Y √ó Z) := rfl

instance : has_products.{u+1 u} (Type u) := 
{ prod := Œª Œ≤ f, { X := Œ† b, f b, œÄ := Œª b x, x b } }.

@[simp] lemma types_pi {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) : pi f = Œ† b, f b := rfl
@[simp] lemma types_pi_œÄ {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (b : Œ≤) : pi.œÄ f b = Œª (g : Œ† b, f b), g b := rfl.
@[simp] lemma types_pi_map {Œ≤ Œ± : Type u} (f : Œ± ‚Üí Type u) (g : Œ≤ ‚Üí Type u) 
  (h : Œ≤ ‚Üí Œ±) (k : Œ† b, f (h b) ‚ü∂ g b) (a : pi f) : 
  pi.map h k a = (Œª (b : Œ≤), k b (a (h b))) := rfl
@[simp] lemma types_pi_of_components {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) {P : Type u} (p : Œ† b, P ‚ü∂ f b) : 
  pi.of_components p = Œª q b, p b q := rfl

instance : has_equalizers.{u+1 u} (Type u) := 
{ equalizer := Œª Y Z f g, { X := { y : Y // f y = g y }, Œπ := subtype.val } }

instance : has_pullbacks.{u+1 u} (Type u) := 
{ pullback := Œª Y‚ÇÅ Y‚ÇÇ Z r‚ÇÅ r‚ÇÇ, { X := { z : Y‚ÇÅ √ó Y‚ÇÇ // r‚ÇÅ z.1 = r‚ÇÇ z.2 }, œÄ‚ÇÅ := Œª z, z.val.1, œÄ‚ÇÇ := Œª z, z.val.2 } }

local attribute [elab_with_expected_type] quot.lift

instance : has_initial_object.{u+1 u} (Type u) :=
{ initial := pempty }

instance : has_binary_coproducts.{u+1 u} (Type u) := 
{ coprod := Œª Y Z, { X := Y ‚äï Z, Œπ‚ÇÅ := sum.inl, Œπ‚ÇÇ := sum.inr } }

instance : has_coproducts.{u+1 u} (Type u) := 
{ coprod := Œª Œ≤ f, { X := Œ£ b, f b, Œπ := Œª b x, ‚ü®b, x‚ü© } }

def pushout {Y‚ÇÅ Y‚ÇÇ Z : Type u} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ) : cosquare r‚ÇÅ r‚ÇÇ :=
{ X := @quot (Y‚ÇÅ ‚äï Y‚ÇÇ) (Œª p p', ‚àÉ z : Z, p = sum.inl (r‚ÇÅ z) ‚àß p' = sum.inr (r‚ÇÇ z) ),
  Œπ‚ÇÅ := Œª o, quot.mk _ (sum.inl o),
  Œπ‚ÇÇ := Œª o, quot.mk _ (sum.inr o),
  w := funext $ Œª z, quot.sound ‚ü® z, by tidy ‚ü©, }.

def pushout_is_pushout {Y‚ÇÅ Y‚ÇÇ Z : Type u} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ) : is_pushout (pushout r‚ÇÅ r‚ÇÇ) :=
{ desc := Œª s, quot.lift (Œª o, sum.cases_on o s.Œπ‚ÇÅ s.Œπ‚ÇÇ)
            (assume o o' ‚ü®z, hz‚ü©, begin rw hz.left, rw hz.right, dsimp, exact congr_fun s.w z end) }

instance : has_pushouts.{u+1 u} (Type u) :=
{ pushout := @pushout, is_pushout := @pushout_is_pushout }

def coequalizer {Y Z : Type u} (f g : Y ‚ü∂ Z) : cofork f g :=
{ X := @quot Z (Œª z z', ‚àÉ y : Y, z = f y ‚àß z' = g y),
  œÄ := Œª z, quot.mk _ z,
  w := funext $ Œª x, quot.sound ‚ü® x, by tidy ‚ü© }.

def coequalizer_is_coequalizer {Y Z : Type u} (f g : Y ‚ü∂ Z) : is_coequalizer (coequalizer f g) :=
{ desc := Œª s, quot.lift (Œª (z : Z), s.œÄ z)
    (assume z z' ‚ü®y, hy‚ü©, begin rw hy.left, rw hy.right, exact congr_fun s.w y, end) }

instance : has_coequalizers.{u+1 u} (Type u) := 
{ coequalizer := @coequalizer, is_coequalizer := @coequalizer_is_coequalizer }

variables {J : Type u} [ùí• : small_category J]
include ùí•

def limit (F : J ‚Üù Type u) : cone F :=
{ X := {u : Œ† j, F j // ‚àÄ (j j' : J) (f : j ‚ü∂ j'), F.map f (u j) = u j'},
  œÄ := Œª j u, u.val j }

def limit_is_limit (F : J ‚Üù Type u) : is_limit (limit F) :=
{ lift := Œª s v, ‚ü®Œª j, s.œÄ j v, Œª j j' f, congr_fun (s.w f) _‚ü© }

instance : has_limits.{u+1 u} (Type u) :=
{ limit := @limit, is_limit := @limit_is_limit }

def colimit (F : J ‚Üù Type u) : cocone F :=
{ X := @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2),
  Œπ := Œª j x, quot.mk _ ‚ü®j, x‚ü©,
  w := Œª j j' f, funext $ Œª x, eq.symm (quot.sound ‚ü®f, rfl‚ü©) }

def colimit_is_colimit (F : J ‚Üù Type u) : is_colimit (colimit F) :=
{ desc := Œª s, quot.lift (Œª (p : Œ£ j, F j), s.Œπ p.1 p.2)
    (assume ‚ü®j, x‚ü© ‚ü®j', x'‚ü© ‚ü®f, hf‚ü©,
      by rw hf; exact (congr_fun (s.w f) x).symm) }

instance : has_colimits.{u+1 u} (Type u) :=
{ colimit := @colimit, is_colimit := @colimit_is_colimit }

end category_theory.universal.types


