import category_theory.universal.limits
import category_theory.universal.colimits
import category_theory.universal.limits.limits

universe u

open category_theory category_theory.universal

namespace category_theory.universal.types

local attribute [forward] fork.w square.w

instance : has_binary_products.{u+1 u} (Type u) := 
{ prod := Œª Y Z, { X := Y √ó Z, œÄ‚ÇÅ := prod.fst, œÄ‚ÇÇ := prod.snd } }

-- FIXME why is this failing?
instance : has_products.{u+1 u} (Type u) := 
{ prod := Œª Œ≤ f, { X := Œ† b, f b, œÄ := Œª b x, x b }, is_product := sorry }.

@[simp] lemma types_pi {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) : pi f = Œ† b, f b := rfl
@[simp] lemma types_pi_œÄ {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (b : Œ≤) : pi.œÄ f b = Œª (g : Œ† b, f b), g b := rfl
@[simp] lemma types_pi_of_components {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) {P : Type u} (p : Œ† b, P ‚ü∂ f b) : 
  pi.of_components p = Œª q b, p b q :=
begin
  dsimp [pi.of_components],
  sorry
end

instance : has_equalizers.{u+1 u} (Type u) := 
{ equalizer := Œª Y Z f g, { X := { y : Y // f y = g y }, Œπ := subtype.val } }

instance : has_pullbacks.{u+1 u} (Type u) := 
{ pullback := Œª Y‚ÇÅ Y‚ÇÇ Z r‚ÇÅ r‚ÇÇ, { X := { z : Y‚ÇÅ √ó Y‚ÇÇ // r‚ÇÅ z.1 = r‚ÇÇ z.2 }, œÄ‚ÇÅ := Œª z, z.val.1, œÄ‚ÇÇ := Œª z, z.val.2 } }

-- TODO update this stuff on colimits to the newer design:

instance : has_binary_coproducts.{u+1 u} (Type u) := 
{ coprod := Œª Y Z, { X := Y ‚äï Z, Œπ‚ÇÅ := sum.inl, Œπ‚ÇÇ := sum.inr } }

-- TODO has_coproducts

local attribute [forward] cofork.w

instance : has_coequalizers.{u+1 u} (Type u) := 
{ coequalizer := Œª Y Z f g, 
    begin
      letI setoid := eqv_gen.setoid (Œª x y, ‚àÉ a : Y, f a = x ‚àß g a = y),
      exact { X := quotient setoid,
              œÄ := by obviously }
    end,
  is_coequalizer := sorry }


variables {J : Type u} [ùí• : small_category J]
include ùí•

def limit (F : J ‚Üù Type u) : cone F :=
{ X := {u : Œ† j, F j // ‚àÄ (j j' : J) (f : j ‚ü∂ j'), F.map f (u j) = u j'},
  œÄ := Œª j u, u.val j }

def limit_is_limit (F : J ‚Üù Type u) : is_limit (limit F) :=
{ lift := Œª s v, ‚ü®Œª j, s.œÄ j v, Œª j j' f, congr_fun (s.w f) _‚ü© }

instance : has_limits.{u+1 u} (Type u) :=
{ limit := @limit, is_limit := @limit_is_limit }

def colimit (F : J ‚Üù Type u) : cocone F :=
{ X := @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2),
  Œπ := Œª j x, quot.mk _ ‚ü®j, x‚ü©,
  w := Œª j j' f, funext $ Œª x, eq.symm (quot.sound ‚ü®f, rfl‚ü©) }

local attribute [elab_with_expected_type] quot.lift
def colimit_is_colimit (F : J ‚Üù Type u) : is_colimit (colimit F) :=
{ desc := Œª s, quot.lift (Œª (p : Œ£ j, F j), s.Œπ p.1 p.2)
    (assume ‚ü®j, x‚ü© ‚ü®j', x'‚ü© ‚ü®f, hf‚ü©,
      by rw hf; exact (congr_fun (s.w f) x).symm) }

instance : has_colimits.{u+1 u} (Type u) :=
{ colimit := @colimit, is_colimit := @colimit_is_colimit }

end category_theory.universal.types


