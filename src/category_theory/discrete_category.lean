-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.functor
import category_theory.equivalence

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

def discrete (Œ± : Type u‚ÇÅ) := Œ±

instance discrete_category (Œ± : Type u‚ÇÅ) : small_category (discrete Œ±) :=
{ hom  := Œª X Y, ulift (plift (X = Y)),
  id   := by obviously,
  comp := by obviously }

instance pempty_category : small_category pempty := (by apply_instance : small_category (discrete pempty))

instance punit_category : category.{u‚ÇÅ v‚ÇÅ} punit :=
{ hom  := Œª X Y, punit,
  id   := by obviously,
  comp := by obviously }

example : equivalence.{u‚ÇÅ u‚ÇÅ u‚ÇÅ u‚ÇÅ} punit (discrete punit) := by obviously

def functor.empty (C : Type (u‚ÇÇ+1)) [large_category C] : pempty ‚•§ C := by obviously

-- TODO find a home for these in mathlib. https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/transport.20through.20trivial.20bundles/near/125769004
@[simp] lemma plift.rec.constant {Œ± : Sort u‚ÇÅ} {Œ≤ : Sort u‚ÇÇ} (b : Œ≤) : @plift.rec Œ± (Œª _, Œ≤) (Œª _, b) = Œª _, b :=
funext (Œª x, plift.cases_on x (Œª a, eq.refl (plift.rec (Œª a', b) {down := a})))

@[simp] lemma ulift.rec.constant {Œ± : Type u‚ÇÅ} {Œ≤ : Sort u‚ÇÇ} (b : Œ≤) : @ulift.rec Œ± (Œª _, Œ≤) (Œª _, b) = Œª _, b :=
funext (Œª x, ulift.cases_on x (Œª a, eq.refl (ulift.rec (Œª a', b) {down := a})))

def functor.of_function {C : Type u‚ÇÇ} [category.{u‚ÇÇ v‚ÇÇ} C] {I : Type u‚ÇÅ} (F : I ‚Üí C) : (discrete I) ‚•§ C :=
{ obj := F,
  map' := Œª X Y f, begin cases f, cases f, cases f, exact ùüô (F X) end }

end category_theory
