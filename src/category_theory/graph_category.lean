import category_theory.path_category
import tactic.linarith

open category_theory.graphs

universes u‚ÇÅ v‚ÇÅ

namespace category_theory

def finite_graph {n k : ‚Ñï} (e : vector (fin n √ó fin n) k) := ulift.{v‚ÇÅ} (fin n)

instance finite_graph_category {n k : ‚Ñï} (e : vector (fin n √ó fin n) k) : graph.{v‚ÇÅ v‚ÇÅ} (finite_graph e) :=
{ edges := Œª x y, ulift { a : fin k // e.nth a = (x.down, y.down) } }

def parallel_pair : vector (fin 2 √ó fin 2) 2 := ‚ü® [(0, 1), (0, 1)], by refl ‚ü©

-- Verify typeclass inference is hooked up correctly:
example : category.{v‚ÇÅ v‚ÇÅ} (paths (finite_graph parallel_pair)) := by apply_instance.

variables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

@[simp] def graph_functor {n k : ‚Ñï} {e : vector (fin n √ó fin n) k}
  (objs : vector C n) (homs : Œ† m : fin k, objs.nth (e.nth m).1 ‚ü∂ objs.nth (e.nth m).2) :
  paths (finite_graph.{v‚ÇÅ} e) ‚•§ C :=
functor.of_graph_hom
{ onVertices := Œª x, objs.nth x.down,
  onEdges := Œª x y f,
  begin
    have p := homs f.down.val,
    refine (eq_to_hom _) ‚â´ p ‚â´ (eq_to_hom _), -- TODO this needs a name, e.g. `convert_hom`
    rw f.down.property,
    rw f.down.property,
  end}


def parallel_pair_functor' {X Y : C} (f g : X ‚ü∂ Y) : paths.{v‚ÇÅ} (finite_graph parallel_pair) ‚•§ C :=
graph_functor ‚ü® [X, Y], by refl ‚ü©
(Œª m, match m with
| ‚ü® 0, _ ‚ü© := f
| ‚ü® 1, _ ‚ü© := g
| ‚ü® n+2, _ ‚ü© := by exfalso; linarith
end)

end category_theory
