-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.functor_category
import category_theory.tactics.obviously

set_option trace.tidy true

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ

variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [ùíü : category.{u‚ÇÇ v‚ÇÇ} D] (E : Type u‚ÇÉ) [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]
include ùíû ùíü ‚Ñ∞

def whiskering_on_left : (C ‚•§ D) ‚•§ ((D ‚•§ E) ‚•§ (C ‚•§ E)) := 
{ obj := Œª F, { obj := Œª G, F ‚ãô G,
                map' := Œª _ _ Œ±, (nat_trans.id _) ‚ó´ Œ± },
  map' := Œª F G œÑ, 
  { app := Œª H, 
    { app := Œª c, H.map (œÑ c), 
      naturality' := begin intros X Y f, dsimp at *, erw [‚Üêfunctor.map_comp, ‚Üêfunctor.map_comp, ‚Üênat_trans.naturality] end },
    naturality' := begin intros X Y f, ext1, dsimp at *, simp at *, erw [‚Üênat_trans.naturality] end } }

def whiskering_on_right : (D ‚•§ E) ‚•§ ((C ‚•§ D) ‚•§ (C ‚•§ E)) :=
{ obj := Œª H, { obj := Œª F, F ‚ãô H,
                map' := Œª _ _ Œ±, Œ± ‚ó´ (nat_trans.id _) },
  map' := Œª G H œÑ, 
  { app := Œª F, 
    { app := Œª c, œÑ (F c),
      naturality' := begin intros X Y f, dsimp at *, erw [nat_trans.naturality] end },
    naturality' := begin intros X Y f, ext1, dsimp at *, simp at *, erw [‚Üênat_trans.naturality] end } }

variables {C} {D} {E}

def whisker_on_left (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚üπ H) : (F ‚ãô G) ‚üπ (F ‚ãô H) :=
((whiskering_on_left C D E) F).map Œ±

@[simp] lemma whisker_on_left.app (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚üπ H) (X : C) : (whisker_on_left F Œ±) X = Œ± (F X) := 
begin
  dsimp [whisker_on_left, whiskering_on_left],
  rw category_theory.functor.map_id,
  rw category.comp_id,
end

def whisker_on_right {G H : C ‚•§ D} (Œ± : G ‚üπ H) (F : D ‚•§ E) : (G ‚ãô F) ‚üπ (H ‚ãô F) := 
((whiskering_on_right C D E) F).map Œ±

@[simp] lemma whisker_on_right.app {G H : C ‚•§ D} (Œ± : G ‚üπ H) (F : D ‚•§ E) (X : C) : (whisker_on_right Œ± F) X = F.map (Œ± X) := 
begin
  dsimp [whisker_on_right, whiskering_on_right],
  rw category.id_comp,
end

@[simp] lemma whisker_on_left_vcomp (F : C ‚•§ D) {G H K : D ‚•§ E} (Œ± : G ‚üπ H) (Œ≤ : H ‚üπ K) : 
  whisker_on_left F (Œ± ‚äü Œ≤) = ((whisker_on_left F Œ±) ‚äü (whisker_on_left F Œ≤)) :=
((whiskering_on_left C D E) F).map_comp Œ± Œ≤

@[simp] lemma whisker_on_right_vcomp {G H K : C ‚•§ D} (Œ± : G ‚üπ H) (Œ≤ : H ‚üπ K) (F : D ‚•§ E)  : 
  whisker_on_right (Œ± ‚äü Œ≤) F = ((whisker_on_right Œ± F) ‚äü (whisker_on_right Œ≤ F)) :=
((whiskering_on_right C D E) F).map_comp Œ± Œ≤

variables {B : Type u‚ÇÑ} [‚Ñ¨ : category.{u‚ÇÑ v‚ÇÑ} B]
include ‚Ñ¨ 

@[simp] lemma whisker_on_left_twice (F : B ‚•§ C) (G : C ‚•§ D) {H K : D ‚•§ E} (Œ± : H ‚üπ K) :
  whisker_on_left F (whisker_on_left G Œ±) = (@whisker_on_left _ _ _ _ _ _ (F ‚ãô G) _ _ Œ±) :=
by tidy

@[simp] lemma whisker_on_right_twice {H K : B ‚•§ C} (F : C ‚•§ D) (G : D ‚•§ E) (Œ± : H ‚üπ K) :
  whisker_on_right (whisker_on_right Œ± F) G = (@whisker_on_right _ _ _ _ _ _ _ _ Œ± (F ‚ãô G)) :=
by tidy

lemma whisker_on_right_left (F : B ‚•§ C) {G H : C ‚•§ D} (Œ± : G ‚üπ H) (K : D ‚•§ E) :
  whisker_on_right (whisker_on_left F Œ±) K = whisker_on_left F (whisker_on_right Œ± K) :=
by tidy

end category_theory