import category_theory.opposites
import category_theory.full_subcategory
import category_theory.universal.types
import category_theory.examples.topological_spaces

open category_theory
open category_theory.limits
open category_theory.examples.topological_spaces

universes u v u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

section
variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] (V : Type u‚ÇÇ) [ùí± : category.{u‚ÇÇ v‚ÇÇ} V]
include ùíû ùí±

def presheaf := (C·µí·µñ) ‚•§ V

def presheaves : category (presheaf C V) := begin unfold presheaf, apply_instance end
end

variables (Œ± : Type v) [topological_space Œ±]

local attribute [back] topological_space.is_open_inter
local attribute [back] open_set.is_open

instance : has_inter (open_set Œ±) := 
{ inter := Œª U V, ‚ü® U.s ‚à© V.s, by obviously ‚ü© }

instance has_inter_op : has_inter ((open_set Œ±)·µí·µñ) := 
{ inter := Œª U V, ‚ü® U.s ‚à© V.s, by obviously ‚ü© }

structure cover' :=
(I : Type v)
(U : I ‚Üí (open_set Œ±))

variables {Œ±}

-- TODO cleanup
def cover'.union (c : cover' Œ±) : open_set Œ± := ‚ü® set.Union (Œª i : c.I, (c.U i).1), 
  begin 
  apply topological_space.is_open_sUnion, 
  tidy, 
  subst H_h,
  exact (c.U H_w).2
  end ‚ü©
def cover'.union_subset (c : cover' Œ±) (i : c.I) : c.U i ‚ü∂ c.union := by obviously

private definition inter_subset_left {C : cover' Œ±} (i j : C.I) : (C.U i ‚à© C.U j) ‚ü∂ (C.U i) := by obviously
private definition inter_subset_right {C : cover' Œ±} (i j : C.I) : (C.U i ‚à© C.U j) ‚ü∂ (C.U j) := by obviously


section
variables {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíü

definition res_left
  {C : cover' Œ±} 
  (i j : C.I) 
  (F : presheaf (open_set Œ±) D) : (F.obj (C.U i)) ‚ü∂ (F.obj ((C.U i) ‚à© (C.U j))) := 
F.map (inter_subset_left i j)

definition res_right
  {C : cover' Œ±} 
  (i j : C.I) 
  (F : presheaf (open_set Œ±) D) : (F.obj (C.U j)) ‚ü∂ (F.obj ((C.U i) ‚à© (C.U j))) := 
F.map (inter_subset_right i j)

private definition union_res
  {C : cover' Œ±} 
  (i : C.I) 
  (F : presheaf (open_set Œ±) D) : (F.obj (C.union)) ‚ü∂ (F.obj ((C.U i))) := 
F.map (C.union_subset i)

@[simp] lemma union_res_left_right 
  {C : cover' Œ±} 
  (i j : C.I) 
  (F : presheaf (open_set Œ±) D) : union_res i F ‚â´ res_left i j F = union_res j F ‚â´ res_right i j F :=
begin
  dsimp [union_res, res_left, res_right],
  rw ‚Üê functor.map_comp,
  rw ‚Üê functor.map_comp,
  refl,
end
end

section
variables {V : Type u} [ùí± : category.{u v} V] [has_products.{u v} V]
include ùí±

variables (cover : cover' Œ±) (F : presheaf (open_set Œ±) V) 

def sections : V :=
pi.{u v} (Œª c : cover.I, F.obj (cover.U c))

def select_section (i : cover.I) := pi.œÄ (Œª c : cover.I, F.obj (cover.U c)) i

def overlaps : V :=
pi.{u v} (Œª p : cover.I √ó cover.I, F.obj (cover.U p.1 ‚à© cover.U p.2))

def left : (sections cover F) ‚ü∂ (overlaps cover F) := 
pi.map (Œª p, p.1) (Œª p, res_left p.1 p.2 F)

def right : (sections cover F) ‚ü∂ (overlaps cover F) := 
pi.map (Œª p, p.2) (Œª p, res_right p.1 p.2 F)

def res : F.obj (cover.union) ‚ü∂ (sections cover F) :=
pi.of_components (Œª i, union_res i F)

@[simp] lemma res_left_right : res cover F ‚â´ left cover F = res cover F ‚â´ right cover F :=
begin
  dsimp [left, right, res],
  simp,
end

def cover_fork : fork (left cover F) (right cover F) :=
{ X := F.obj (cover.union),
  Œπ := res cover F, }


class is_sheaf (presheaf : presheaf (open_set Œ±) V) :=
(sheaf_condition : Œ† (cover : cover' Œ±), is_equalizer (cover_fork cover presheaf))

variables (Œ± V)

structure sheaf  :=
(presheaf : presheaf (open_set Œ±) V)
(sheaf_condition : is_sheaf presheaf)

variables {Œ± V}

def sheaf.near (F : sheaf Œ± V) (x : Œ±) : presheaf { U : open_set Œ± // x ‚àà U } V :=
(full_subcategory_embedding (Œª U : open_set Œ±, x ‚àà U)).op ‚ãô F.presheaf

variable [has_colimits.{u v} V]

def stalk_at (F : sheaf Œ± V) (x : Œ±) : V :=
colimit (F.near x)

end
