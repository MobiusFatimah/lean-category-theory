-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.functor
import category_theory.embedding

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ w‚ÇÅ

local attribute [back] category.id -- This says that whenever there is a goal of the form C.Hom X X, we can safely complete it with the identity morphism. This isn't universally true.

variables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû 

instance sigma_category (Z : C ‚Üí Type w‚ÇÅ) : category.{(max u‚ÇÅ w‚ÇÅ) v‚ÇÅ} (Œ£ X : C, Z X) := 
{ hom  := Œª X Y, X.1 ‚ü∂ Y.1,
  id   := by obviously,
  comp := Œª _ _ _ f g, f ‚â´ g }

instance full_subcategory (Z : C ‚Üí Prop) : category.{u‚ÇÅ v‚ÇÅ} {X : C // Z X} := 
{ hom  := Œª X Y, X.1 ‚ü∂ Y.1,
  id   := by obviously,
  comp := Œª _ _ _ f g, f ‚â´ g }

def sigma_category_embedding (Z : C ‚Üí Type u‚ÇÅ) : (Œ£ X : C, Z X) ‚•§ C := 
{ obj := Œª X, X.1,
  map' := Œª _ _ f, f }

def full_subcategory_embedding (Z : C ‚Üí Prop) : {X : C // Z X} ‚•§ C := 
{ obj := Œª X, X.1,
  map' := Œª _ _ f, f }

-- move out/simplify dependencies
instance full_œÉ        (Z : C ‚Üí Type u‚ÇÅ) : full    (sigma_category_embedding Z)    := by obviously
instance full_full     (Z : C ‚Üí Prop)    : full     (full_subcategory_embedding Z) := by obviously
instance faithful_œÉ    (Z : C ‚Üí Type u‚ÇÅ) : faithful (sigma_category_embedding Z)   := by obviously
instance faithful_full (Z : C ‚Üí Prop)    : faithful (full_subcategory_embedding Z) := by obviously

variables {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíü 

def restrict_functor_œÉ (F : C ‚•§ D) (ZC : C ‚Üí Type u‚ÇÅ) (ZD : D ‚Üí Type u‚ÇÇ) (w : ‚àÄ {X : C} (z : ZC X), ZD (F X)) : (Œ£ X : C, ZC X) ‚•§ (Œ£ Y : D, ZD Y) := 
{ obj := Œª X, ‚ü® F X.1, w X.2 ‚ü©,
  map' := Œª _ _ f, F.map f }

def restrict_functor (F : C ‚•§ D) (ZC : C ‚Üí Prop) (ZD : D ‚Üí Prop) (w : ‚àÄ {X : C} (z : ZC X), ZD (F X)) : {X : C // ZC X} ‚•§ {Y : D // ZD Y} := 
{ obj := Œª X, ‚ü® F X.1, w X.2 ‚ü©,
  map' := Œª _ _ f, F.map f }

end category_theory
