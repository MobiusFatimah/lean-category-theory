-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.equivalence

namespace category_theory

universes u u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

structure idempotent (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] :=
(X : C)
(idem : X ‚ü∂ X)
(w' : idem ‚â´ idem = idem . obviously)

restate_axiom idempotent.w'
attribute [simp,search] idempotent.w

variables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

namespace idempotent

structure morphism (P Q : idempotent.{u‚ÇÅ v‚ÇÅ} C) :=
(hom : P.X ‚ü∂ Q.X)
(left' : P.idem ‚â´ hom = hom . obviously)
(right' : hom ‚â´ Q.idem = hom . obviously)

restate_axiom morphism.left'
restate_axiom morphism.right'
attribute [simp,search] morphism.left morphism.right

@[extensionality] lemma ext {P Q : idempotent C} (f g : morphism P Q) (w : f.hom = g.hom) : f = g :=
begin
  induction f,
  induction g,
  tidy
end

end idempotent

instance idempotent_completion : category.{(max u‚ÇÅ v‚ÇÅ) v‚ÇÅ} (idempotent C) :=
{ hom  := idempotent.morphism,
  id   := Œª P, ‚ü® P.idem ‚ü©,
  comp := Œª _ _ _ f g, ‚ü® f.hom ‚â´ g.hom ‚ü© }

namespace idempotent_completion

@[simp] lemma id_hom (P : idempotent C) : ((ùüô P) : idempotent.morphism P P).hom = P.idem := rfl
@[simp] lemma comp_hom {P Q R : idempotent C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) : (f ‚â´ g).hom = f.hom ‚â´ g.hom := rfl

def to_completion (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] : C ‚•§ (idempotent.{u‚ÇÅ v‚ÇÅ} C) :=
{ obj := Œª P, { X := P, idem := ùüô P },
  map := Œª _ _ f, { hom := f } }

@[simp] private lemma double_idempotent_morphism_left (P Q : idempotent (idempotent C)) (f : P ‚ü∂ Q)
  : (P.idem).hom ‚â´ (f.hom).hom = (f.hom).hom := congr_arg idempotent.morphism.hom f.left
@[simp] private lemma double_idempotent_morphism_right (P Q : idempotent (idempotent C)) (f : P ‚ü∂ Q)
  : (f.hom).hom ‚â´ (Q.idem).hom = (f.hom).hom := congr_arg idempotent.morphism.hom f.right

@[simp] private def idempotent_functor : (idempotent (idempotent C)) ‚•§ (idempotent C) :=
{ obj := Œª P, ‚ü® P.X.X, P.idem.hom, congr_arg idempotent.morphism.hom P.w ‚ü©,
  map := Œª _ _ f, ‚ü® f.hom.hom, by obviously ‚ü© }.
@[simp] private def idempotent_inverse : (idempotent C) ‚•§ (idempotent (idempotent C)) :=
{ obj := Œª P, ‚ü® P, ‚ü® P.idem, by obviously ‚ü©, by obviously ‚ü©,
  map := Œª _ _ f, ‚ü® f, by obviously ‚ü© }.

@[simp] lemma idem_hom_idempotent (X : idempotent (idempotent C)) : X.idem.hom ‚â´ X.idem.hom = X.idem.hom :=
begin
  rw ‚Üêcomp_hom,
  simp,
end

lemma idempotent_idempotent :
  equivalence (idempotent (idempotent C)) (idempotent C) :=
{ functor := idempotent_functor,
  inverse := idempotent_inverse,
  fun_inv_id' :=
  { hom := { app := Œª X, { hom := { hom := X.idem.hom } } },
    inv := { app := Œª X, { hom := { hom := X.idem.hom } } } },
  inv_fun_id' :=
  { hom := { app := Œª X, { hom := X.idem } },
    inv := { app := Œª X, { hom := X.idem } } } }

variable {D : Type u‚ÇÇ}
variable [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
include ùíü

def extend_to_completion (F : C ‚•§ (idempotent D)) : (idempotent C) ‚•§ (idempotent D) :=
{ obj := Œª P,
  { X := (F.obj P.X).X,
    idem := (F.map P.idem).hom },
  map := Œª _ _ f, { hom := (F.map f.hom).hom } }

end idempotent_completion
end category_theory
