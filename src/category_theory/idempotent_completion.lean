-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.equivalence

namespace category_theory

universes u u‚ÇÅ u‚ÇÇ

structure idempotent (C : Type (u+1)) [large_category C] :=
(X : C)
(idem : X ‚ü∂ X)
(w' : idem ‚â´ idem = idem . obviously)

restate_axiom idempotent.w'
attribute [simp,search] idempotent.w

variables {C : Type (u+1)} [large_category C]

namespace idempotent

structure morphism (P Q : idempotent C) :=
(hom : P.X ‚ü∂ Q.X)
(left' : P.idem ‚â´ hom = hom . obviously)
(right' : hom ‚â´ Q.idem = hom . obviously)

restate_axiom morphism.left'
restate_axiom morphism.right'
attribute [simp,search] morphism.left morphism.right

@[extensionality] lemma ext {P Q : idempotent C} (f g : morphism P Q) (w : f.hom = g.hom) : f = g :=
begin
  induction f,
  induction g,
  tidy
end

end idempotent

instance idempotent_completion : large_category (idempotent C) :=
{ hom  := idempotent.morphism,
  id   := Œª P, ‚ü® P.idem ‚ü©,
  comp := Œª _ _ _ f g, ‚ü® f.hom ‚â´ g.hom ‚ü© }

namespace idempotent_completion

def functor_to_completion (C : Type (u+1)) [large_category C] : C ‚•§ (idempotent C) :=
{ obj := Œª P, { X := P, idem := ùüô P },
  map := Œª _ _ f, { hom := f } }

-- -- PROJECT
-- def IdempotentCompletion_functorial (C : Type u) [category C] (D : Type u) [category D] : Functor (Functor C D) (Functor (Idempotent C) (Idempotent D)) := {

-- FIXME
-- lemma embedding' (C : Type (u+1)) [large_category C]  : embedding (functor_to_completion C) := by obviously

variable {D : Type (u‚ÇÇ+1)}
variable [large_category D]

def restrict_Functor_from (F : (idempotent C) ‚•§ D) : C ‚•§ D :=
(functor_to_completion C) ‚ãô F

@[simp] private lemma double_idempotent_morphism_left (P Q : idempotent (idempotent C)) (f : P ‚ü∂ Q)
  : (P.idem).hom ‚â´ (f.hom).hom = (f.hom).hom := congr_arg idempotent.morphism.hom f.left
@[simp] private lemma double_idempotent_morphism_right (P Q : idempotent (idempotent C)) (f : P ‚ü∂ Q)
  : (f.hom).hom ‚â´ (Q.idem).hom = (f.hom).hom := congr_arg idempotent.morphism.hom f.right

private def idempotent_functor (C : Type (u+1)) [large_category C] : (idempotent (idempotent C)) ‚•§ (idempotent C) :=
{ obj := Œª P, ‚ü® P.X.X, P.idem.hom, congr_arg idempotent.morphism.hom P.w ‚ü©, -- PROJECT think about automation here
  map := Œª _ _ f, ‚ü® f.hom.hom, by obviously ‚ü© }
private def idempotent_inverse (C : Type (u+1)) [large_category C] : (idempotent C) ‚•§ (idempotent (idempotent C)) :=
{ obj := Œª P, ‚ü® P, ‚ü® P.idem, by obviously ‚ü©, by obviously ‚ü©,
  map := Œª _ _ f, ‚ü® f, by obviously ‚ü© }

-- PROJECT prove these lemmas about idempotent completion

-- lemma IdempotentCompletion_idempotent (C : Type u) [category C] :
--   equivalence (IdempotentCompletion (IdempotentCompletion C)) (IdempotentCompletion C) :=
-- {
--   functor := IdempotentCompletion_idempotent_functor C,
--   inverse := IdempotentCompletion_idempotent_inverse C,
--   isomorphism_1 := begin tidy, exact C.identity _, tidy, induction f_2, tidy, end, -- PROJECT very slow??
--   isomorphism_2 := sorry
--}

def extend_Functor_to_completion (F : C ‚•§ (idempotent D)) : (idempotent C) ‚•§ (idempotent D) :=
{ obj := Œª P,
  { X := (F.obj P.X).X,
    idem := (F.map P.idem).hom },
  map := Œª _ _ f, { morphism := (F.map f.hom).hom } }

-- lemma Functor_from_IdempotentCompletion_determined_by_restriction
--   {C D : Category} (F : Functor (IdempotentCompletion C) (IdempotentCompletion D)) :
--     NaturalIsomorphism (extend_Functor_to_IdempotentCompletion (restrict_Functor_from_IdempotentCompletion F)) F :=
--       sorry

-- PROJECT idempotent completion left adjoint to the forgetful functor from categories to semicategories?

end idempotent_completion
end category_theory
