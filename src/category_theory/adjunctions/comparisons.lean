-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.adjunctions
import category_theory.adjunctions.hom_adjunction

-- FIXME why do we need this here?
@[obviously] meta def obviously_3 := tactic.tidy { tactics := extended_tidy_tactics }

open category_theory

namespace category_theory.adjunctions

universes u v u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ

-- TODO If these are really necessary, move them to category_theory/products.lean
section
variables {A : Type u‚ÇÅ} [ùíú : category.{u‚ÇÅ v‚ÇÅ} A] {B : Type u‚ÇÇ} [‚Ñ¨ : category.{u‚ÇÇ v‚ÇÇ} B] {C : Type u‚ÇÉ} [ùíû : category.{u‚ÇÉ v‚ÇÉ} C] {D : Type u‚ÇÑ} [ùíü : category.{u‚ÇÑ v‚ÇÑ} D]
include ùíú ‚Ñ¨ ùíû ùíü

@[simp,search] lemma prod_obj' (F : A ‚Üù B) (G : C ‚Üù D) (a : A) (c : C) : (functor.prod F G).obj (a, c) = (F a, G c) := rfl
@[simp,search] lemma prod_app' {F G : A ‚Üù B} {H I : C ‚Üù D} (Œ± : F ‚üπ G) (Œ≤ : H ‚üπ I) (a : A) (c : C) : (nat_trans.prod Œ± Œ≤).app (a, c) = (Œ± a, Œ≤ c) := rfl
end

variables {C : Type u‚ÇÅ} [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÅ} [ùíü : category.{u‚ÇÅ v‚ÇÅ} D]
include ùíû ùíü 
variables {L : C ‚Üù D} {R : D ‚Üù C} 

@[reducible] private def Adjunction_to_HomAdjunction_morphism (A : L ‚ä£ R) 
  : ((functor.prod L.op (functor.id D)) ‚ãô (functor.hom D)) ‚üπ 
                          (functor.prod (functor.id (C·µí·µñ)) R) ‚ãô (functor.hom C) := 
{ app := Œª P, 
    -- We need to construct the map from D.Hom (L P.1) P.2 to C.Hom P.1 (R P.2)
    Œª f, (A.unit P.1) ‚â´ (R.map f) }

@[reducible] private def Adjunction_to_HomAdjunction_inverse (A : L ‚ä£ R) 
  : (functor.prod (functor.id (C·µí·µñ)) R) ‚ãô (functor.hom C) ‚üπ 
                          ((functor.prod L.op (functor.id D)) ‚ãô (functor.hom D)) :=
{ app := Œª P, 
    -- We need to construct the map back to D.Hom (L P.1) P.2 from C.Hom P.1 (R P.2)
    Œª f, (L.map f) ‚â´ (A.counit P.2) }

def Adjunction_to_HomAdjunction (A : L ‚ä£ R) : hom_adjunction L R := 
{ hom := Adjunction_to_HomAdjunction_morphism A,
  inv := Adjunction_to_HomAdjunction_inverse A }

@[simp,search] lemma mate_of_L (A : hom_adjunction L R) {X Y : C} (f : X ‚ü∂ Y) : (((A.hom) (X, L X)) (ùüô (L X))) ‚â´ 
      (R.map (L.map f))
      = ((A.hom) (X, L Y)) (L.map f) :=
begin
  have p := @nat_trans.naturality _ _ _ _ _ _ A.hom (X, L X) (X, L Y) (ùüô X, L.map f),
  have q := congr_fun p (L.map (ùüô X)),
  obviously,
  erw category_theory.functor.map_id at q, -- FIXME why doesn't simp do this
  obviously,
end

@[simp,search] lemma mate_of_L' (A : hom_adjunction L R) {X Y : C} (f : X ‚ü∂ Y) : f ‚â´ (((A.hom) (Y, L Y)) (ùüô (L Y)))
      = ((A.hom) (X, L Y)) (L.map f) :=
begin
  have p := @nat_trans.naturality _ _ _ _ _ _ A.hom (Y, L Y) (X, L Y) (f, ùüô (L Y)),
  have q := congr_fun p (L.map (ùüô Y)),
  obviously,
end

@[simp,search] lemma mate_of_R (A : hom_adjunction L R) {X Y : D} (f : X ‚ü∂ Y) : (L.map (R.map f)) ‚â´ (((A.inv) (R Y, Y)) (ùüô (R Y)))
      = ((A.inv) (R X, Y)) (R.map f) :=
begin
  have p := @nat_trans.naturality _ _ _ _ _ _ A.inv (R Y, Y) (R X, Y) (R.map f, ùüô Y),
  have q := congr_fun p (R.map (ùüô Y)),
  tidy,
end

@[simp,search] lemma mate_of_R' (A : hom_adjunction L R) {X Y : D} (f : X ‚ü∂ Y) : (((A.inv) (R X, X)) (ùüô (R X))) ‚â´ f = 
    ((A.inv) (R X, Y)) (R.map f) :=
begin
  have p := @nat_trans.naturality _ _ _ _ _ _ A.inv (R X, X) (R X, Y) (ùüô (R X), f),
  have q := congr_fun p (R.map (ùüô X)),
  obviously,
end

private def counit_from_HomAdjunction (A : hom_adjunction L R) : (R ‚ãô L) ‚üπ (functor.id _) := 
{ app := Œª X : D, (A.inv (R X, X)) (ùüô (R X)) }

private def unit_from_HomAdjunction (A : hom_adjunction L R) : (functor.id _) ‚üπ (L ‚ãô R) := 
{ app := Œª X : C, (A.hom (X, L X)) (ùüô (L X)) }

-- PROJECT
-- def HomAdjunction_to_Adjunction {L : C ‚Üù D} {R : D ‚Üù C} (A : hom_adjunction L R) : L ‚ä£ R := 
-- {
--   unit       := unit_from_HomAdjunction A,
--   counit     := counit_from_HomAdjunction A,
--   triangle_1 := begin
--                   tidy, 
--                   -- have p1 := A.witness_2,
--                   -- have p2 := congr_arg NaturalTransformation.components p1,
--                   -- have p3 := congr_fun p2 (((R +> X) : C), L +> (R +> X)),
--                   -- have p4 := congr_fun p3 (ùüô (R +> X)),
--                   -- tidy,
--                   sorry
--                 end,
--   triangle_2 := sorry
-- }

-- def Adjunctions_agree (L : C ‚Üù D) (R : D ‚Üù C) : equiv (L ‚ä£ R) (hom_adjunction L R) := 
-- { to_fun    := Adjunction_to_HomAdjunction,
--   inv_fun   := HomAdjunction_to_Adjunction,
--   left_inv  := begin sorry end,
--   right_inv := begin
--                  sorry,
--                  -- this is just another lemma about mates; perhaps the same as the one we use above.
--                end }

end category_theory.adjunctions