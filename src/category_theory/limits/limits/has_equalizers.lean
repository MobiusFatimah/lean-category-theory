import category_theory.limits.limits
import category_theory.limits.products
import category_theory.limits.equalizers
import category_theory.graph_category
import category_theory.discrete_category
-- import tactic.fin_cases

universes u v w

@[simp] lemma vector_nth_zero {Œ± : Type u} {n : ‚Ñï} (h : Œ±) (t : list Œ±) (p p'): @vector.nth Œ± n ‚ü®h :: t, p‚ü© ‚ü®0, p'‚ü© = h := rfl

open category_theory

namespace category_theory.limits

variables {C : Type u} [ùíû : category.{u v} C]
include ùíû
variables [has_limits.{u v} C] {J : Type v} [ùí• : small_category J]
include ùí•

instance : has_products.{u v} C :=
{ prod := Œª Œ≤ f, { .. (limit.cone (functor.of_function f)) },
  is_product := Œª Œ≤ f, { lift := Œª s, limit.lift (functor.of_function f) { .. s } } }.

#print parallel_pair_functor._match_1

-- instance : has_equalizers.{u v} C :=
-- { equalizer := Œª Y Z f g,
--     let c := limit.cone.{u v} (parallel_pair_functor f g) in
--     { X := c.X, Œπ := c.œÄ  ‚ü® ‚ü® 0, by tidy ‚ü© ‚ü©,
--       w' :=
--       begin
--         sorry
--         -- tidy,
--         -- have p‚ÇÅ := @cone.w _ _ _ _ _ c ‚ü® ‚ü® 0, by tidy ‚ü© ‚ü© ‚ü® ‚ü® 1, by tidy ‚ü© ‚ü© p[ ‚ü® ‚ü® 0, by tidy ‚ü© ‚ü©  ],
--         -- dsimp at p‚ÇÅ {md:=semireducible},
--         -- repeat { erw category.comp_id at p‚ÇÅ },
--         -- repeat { erw category.id_comp at p‚ÇÅ },
--         -- erw p‚ÇÅ,
--         -- have p‚ÇÇ := @cone.w _ _ _ _ _ c ‚ü® ‚ü® 0, by tidy ‚ü© ‚ü© ‚ü® ‚ü® 1, by tidy ‚ü© ‚ü© p[ ‚ü® ‚ü® 1, by tidy ‚ü© ‚ü©  ],
--         -- dsimp at p‚ÇÇ {md:=semireducible},
--         -- repeat { erw category.comp_id at p‚ÇÇ },
--         -- repeat { erw category.id_comp at p‚ÇÇ },
--         -- erw p‚ÇÇ,
--       end },
--   is_equalizer := Œª Y Z f g,
--     let c := limit.cone.{u v} (parallel_pair_functor f g) in
--     { lift := Œª s, limit.lift (parallel_pair_functor f g)
--       { X := s.X,
--         œÄ := Œª j, begin
--                     cases j, fin_cases,
--                     exact s.Œπ,
--                     refine s.Œπ ‚â´ f ‚â´ (eq_to_hom _), refl,
--                   end,
--         w' := begin
--                 tidy,
--                 fin_cases; fin_cases,
--                 tidy,
--                 cases f_1,
--                 tidy,
--                 sorry,
--                 fin_cases; fin_cases,
--                 dsimp [parallel_pair] at *,
--                 injection f_1_e_property,
--                 injection h_2,
--                 -- This is probably automatable, but it looks painful.
--               end, }, } }



end category_theory.limits