-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison, Reid Barton, Mario Carneiro

import category_theory.limits.shape

open category_theory

namespace category_theory.limits

universes u v w

variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

section pullback
variables {Y‚ÇÅ Y‚ÇÇ Z : C} {r‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {r‚ÇÇ : Y‚ÇÇ ‚ü∂ Z}
structure is_pullback (t : square r‚ÇÅ r‚ÇÇ) :=
(lift : ‚àÄ (s : square r‚ÇÅ r‚ÇÇ), s.X ‚ü∂ t.X)
(fac‚ÇÅ' : ‚àÄ (s : square r‚ÇÅ r‚ÇÇ), (lift s ‚â´ t.œÄ‚ÇÅ) = s.œÄ‚ÇÅ . obviously)
(fac‚ÇÇ' : ‚àÄ (s : square r‚ÇÅ r‚ÇÇ), (lift s ‚â´ t.œÄ‚ÇÇ) = s.œÄ‚ÇÇ . obviously)
(uniq' : ‚àÄ (s : square r‚ÇÅ r‚ÇÇ) (m : s.X ‚ü∂ t.X) (w‚ÇÅ : (m ‚â´ t.œÄ‚ÇÅ) = s.œÄ‚ÇÅ) (w‚ÇÇ : (m ‚â´ t.œÄ‚ÇÇ) = s.œÄ‚ÇÇ), m = lift s . obviously)

restate_axiom is_pullback.fac‚ÇÅ'
attribute [simp] is_pullback.fac‚ÇÅ
restate_axiom is_pullback.fac‚ÇÇ'
attribute [simp] is_pullback.fac‚ÇÇ
restate_axiom is_pullback.uniq'

@[extensionality] lemma is_pullback.ext {t : square r‚ÇÅ r‚ÇÇ} (P Q : is_pullback t) : P = Q :=
begin
  cases P, cases Q,
  simp,
  ext1,
  exact eq.symm (P_uniq' x (Q_lift x) (Q_fac‚ÇÅ' x) (Q_fac‚ÇÇ' x))
end

lemma is_pullback.univ {t : square r‚ÇÅ r‚ÇÇ} (h : is_pullback t) (s : square r‚ÇÅ r‚ÇÇ) (œÜ : s.X ‚ü∂ t.X) :
  (œÜ ‚â´ t.œÄ‚ÇÅ = s.œÄ‚ÇÅ ‚àß œÜ ‚â´ t.œÄ‚ÇÇ = s.œÄ‚ÇÇ) ‚Üî (œÜ = h.lift s) :=
‚ü® Œª a, is_pullback.uniq h s œÜ a.1 a.2,
  Œª a, ‚ü® by rw [a, is_pullback.fac‚ÇÅ],
         by rw [a, is_pullback.fac‚ÇÇ] ‚ü© ‚ü©

def is_pullback.of_lift_univ {t : square r‚ÇÅ r‚ÇÇ}
  (lift : Œ† (s : square r‚ÇÅ r‚ÇÇ), s.X ‚ü∂ t.X)
  (univ : Œ† (s : square r‚ÇÅ r‚ÇÇ) (œÜ : s.X ‚ü∂ t.X), (œÜ ‚â´ t.œÄ‚ÇÅ = s.œÄ‚ÇÅ ‚àß œÜ ‚â´ t.œÄ‚ÇÇ = s.œÄ‚ÇÇ) ‚Üî (œÜ = lift s)) :
  is_pullback t :=
{ lift := lift,
  fac‚ÇÅ' := Œª s, ((univ s (lift s)).mpr (eq.refl (lift s))).left,
  fac‚ÇÇ' := Œª s, ((univ s (lift s)).mpr (eq.refl (lift s))).right,
  uniq' := Œª s m w‚ÇÅ w‚ÇÇ, (univ s m).mp ‚ü®w‚ÇÅ, w‚ÇÇ‚ü© }

end pullback


section pushout
variables {Y‚ÇÅ Y‚ÇÇ Z : C} {r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ} {r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ}
structure is_pushout (t : cosquare r‚ÇÅ r‚ÇÇ) :=
(desc : ‚àÄ (s : cosquare r‚ÇÅ r‚ÇÇ), t.X ‚ü∂ s.X)
(fac‚ÇÅ' : ‚àÄ (s : cosquare r‚ÇÅ r‚ÇÇ), (t.Œπ‚ÇÅ ‚â´ desc s) = s.Œπ‚ÇÅ . obviously)
(fac‚ÇÇ' : ‚àÄ (s : cosquare r‚ÇÅ r‚ÇÇ), (t.Œπ‚ÇÇ ‚â´ desc s) = s.Œπ‚ÇÇ . obviously)
(uniq' : ‚àÄ (s : cosquare r‚ÇÅ r‚ÇÇ) (m : t.X ‚ü∂ s.X) (w‚ÇÅ : (t.Œπ‚ÇÅ ‚â´ m) = s.Œπ‚ÇÅ) (w‚ÇÇ : (t.Œπ‚ÇÇ ‚â´ m) = s.Œπ‚ÇÇ), m = desc s . obviously)

restate_axiom is_pushout.fac‚ÇÅ'
attribute [simp] is_pushout.fac‚ÇÅ
restate_axiom is_pushout.fac‚ÇÇ'
attribute [simp] is_pushout.fac‚ÇÇ
restate_axiom is_pushout.uniq'

@[extensionality] lemma is_pushout.ext {t : cosquare r‚ÇÅ r‚ÇÇ} (P Q : is_pushout t) : P = Q :=
begin
  cases P, cases Q,
  simp,
  ext1,
  exact eq.symm (P_uniq' x (Q_desc x) (Q_fac‚ÇÅ' x) (Q_fac‚ÇÇ' x))
end

lemma is_pushout.univ {t : cosquare r‚ÇÅ r‚ÇÇ} (h : is_pushout t) (s : cosquare r‚ÇÅ r‚ÇÇ) (œÜ : t.X ‚ü∂ s.X) :
  (t.Œπ‚ÇÅ ‚â´ œÜ = s.Œπ‚ÇÅ ‚àß t.Œπ‚ÇÇ ‚â´ œÜ = s.Œπ‚ÇÇ) ‚Üî (œÜ = h.desc s) :=
‚ü® Œª a, is_pushout.uniq h s œÜ a.1 a.2,
  Œª a, ‚ü® by rw [a, is_pushout.fac‚ÇÅ],
         by rw [a, is_pushout.fac‚ÇÇ] ‚ü© ‚ü©

def is_pushout.of_desc_univ {t : cosquare r‚ÇÅ r‚ÇÇ}
  (desc : Œ† (s : cosquare r‚ÇÅ r‚ÇÇ), t.X ‚ü∂ s.X)
  (univ : Œ† (s : cosquare r‚ÇÅ r‚ÇÇ) (œÜ : t.X ‚ü∂ s.X), (t.Œπ‚ÇÅ ‚â´ œÜ = s.Œπ‚ÇÅ ‚àß t.Œπ‚ÇÇ ‚â´ œÜ = s.Œπ‚ÇÇ) ‚Üî (œÜ = desc s)) : is_pushout t :=
{ desc := desc,
  fac‚ÇÅ' := Œª s, ((univ s (desc s)).mpr (eq.refl (desc s))).left,
  fac‚ÇÇ' := Œª s, ((univ s (desc s)).mpr (eq.refl (desc s))).right,
  uniq' := Œª s m w‚ÇÅ w‚ÇÇ, (univ s m).mp ‚ü®w‚ÇÅ, w‚ÇÇ‚ü© }

end pushout

variable (C)

class has_pullbacks :=
(pullback : Œ† {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Y‚ÇÅ ‚ü∂ Z) (r‚ÇÇ : Y‚ÇÇ ‚ü∂ Z), square r‚ÇÅ r‚ÇÇ)
(is_pullback : Œ† {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Y‚ÇÅ ‚ü∂ Z) (r‚ÇÇ : Y‚ÇÇ ‚ü∂ Z), is_pullback (pullback r‚ÇÅ r‚ÇÇ) . obviously)

class has_pushouts :=
(pushout : Œ† {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ), cosquare r‚ÇÅ r‚ÇÇ)
(is_pushout : Œ† {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ), is_pushout (pushout r‚ÇÅ r‚ÇÇ) . obviously)

variable {C}


section
variables [has_pullbacks.{u v} C] {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Y‚ÇÅ ‚ü∂ Z) (r‚ÇÇ : Y‚ÇÇ ‚ü∂ Z)

def pullback.square := has_pullbacks.pullback.{u v} r‚ÇÅ r‚ÇÇ
def pullback := (pullback.square r‚ÇÅ r‚ÇÇ).X
def pullback.œÄ‚ÇÅ : pullback r‚ÇÅ r‚ÇÇ ‚ü∂ Y‚ÇÅ := (pullback.square r‚ÇÅ r‚ÇÇ).œÄ‚ÇÅ
def pullback.œÄ‚ÇÇ : pullback r‚ÇÅ r‚ÇÇ ‚ü∂ Y‚ÇÇ := (pullback.square r‚ÇÅ r‚ÇÇ).œÄ‚ÇÇ
def pullback.universal_property : is_pullback (pullback.square r‚ÇÅ r‚ÇÇ) := has_pullbacks.is_pullback.{u v} C r‚ÇÅ r‚ÇÇ

@[extensionality] lemma pullback.hom_ext
  {X : C} (f g : X ‚ü∂ pullback r‚ÇÅ r‚ÇÇ)
  (w‚ÇÅ : f ‚â´ pullback.œÄ‚ÇÅ r‚ÇÅ r‚ÇÇ = g ‚â´ pullback.œÄ‚ÇÅ r‚ÇÅ r‚ÇÇ)
  (w‚ÇÇ : f ‚â´ pullback.œÄ‚ÇÇ r‚ÇÅ r‚ÇÇ = g ‚â´ pullback.œÄ‚ÇÇ r‚ÇÅ r‚ÇÇ) : f = g :=
begin
  let s : square r‚ÇÅ r‚ÇÇ :=
  { X := X,
    œÄ‚ÇÅ := f ‚â´ pullback.œÄ‚ÇÅ r‚ÇÅ r‚ÇÇ,
    œÄ‚ÇÇ := f ‚â´ pullback.œÄ‚ÇÇ r‚ÇÅ r‚ÇÇ,
    w' :=
    begin
      /- `obviously` says -/
      dsimp at *, simp at *,
      erw limits.square.w,
      refl,
    end
  },
  have q := (pullback.universal_property r‚ÇÅ r‚ÇÇ).uniq s f,
  have p := (pullback.universal_property r‚ÇÅ r‚ÇÇ).uniq s g,
  rw [q, ‚Üêp],
  exact eq.symm w‚ÇÅ,
  exact eq.symm w‚ÇÇ,
  refl,
  refl
end

end

section
variables [has_pushouts.{u v} C] {Y‚ÇÅ Y‚ÇÇ Z : C} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ)

def pushout.cosquare := has_pushouts.pushout.{u v} r‚ÇÅ r‚ÇÇ
def pushout := (pushout.cosquare r‚ÇÅ r‚ÇÇ).X
def pushout.Œπ‚ÇÅ : Y‚ÇÅ ‚ü∂ pushout r‚ÇÅ r‚ÇÇ := (pushout.cosquare r‚ÇÅ r‚ÇÇ).Œπ‚ÇÅ
def pushout.Œπ‚ÇÇ : Y‚ÇÇ ‚ü∂ pushout r‚ÇÅ r‚ÇÇ := (pushout.cosquare r‚ÇÅ r‚ÇÇ).Œπ‚ÇÇ
def pushout.universal_property : is_pushout (pushout.cosquare r‚ÇÅ r‚ÇÇ) := has_pushouts.is_pushout.{u v} C r‚ÇÅ r‚ÇÇ

@[extensionality] lemma pushout.hom_ext
  {X : C} (f g : pushout r‚ÇÅ r‚ÇÇ ‚ü∂ X)
  (w‚ÇÅ : pushout.Œπ‚ÇÅ r‚ÇÅ r‚ÇÇ ‚â´ f = pushout.Œπ‚ÇÅ r‚ÇÅ r‚ÇÇ ‚â´ g)
  (w‚ÇÇ : pushout.Œπ‚ÇÇ r‚ÇÅ r‚ÇÇ ‚â´ f = pushout.Œπ‚ÇÇ r‚ÇÅ r‚ÇÇ ‚â´ g) : f = g :=
begin
  let s : cosquare r‚ÇÅ r‚ÇÇ :=
  { X := X,
    Œπ‚ÇÅ := pushout.Œπ‚ÇÅ r‚ÇÅ r‚ÇÇ ‚â´ f,
    Œπ‚ÇÇ := pushout.Œπ‚ÇÇ r‚ÇÅ r‚ÇÇ ‚â´ f,
    w' :=
    begin
      /- `obviously` says -/
      rw ‚Üêcategory.assoc,
      erw limits.cosquare.w,
      rw ‚Üêcategory.assoc,
      refl,
    end },
  have q := (pushout.universal_property r‚ÇÅ r‚ÇÇ).uniq s f,
  have p := (pushout.universal_property r‚ÇÅ r‚ÇÇ).uniq s g,
  rw [q, ‚Üêp],
  exact eq.symm w‚ÇÅ,
  exact eq.symm w‚ÇÇ,
  refl,
  refl
end

end

end category_theory.limits
