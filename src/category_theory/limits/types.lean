-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison, Reid Barton

import category_theory.limits

universes u v

open category_theory
open category_theory.limits

namespace category_theory.universal.types

instance : has_terminal_object.{u+1 u} (Type u) :=
{ terminal := punit }

@[simp] lemma types_terminal : (terminal (Type u)) = punit := rfl
@[simp] lemma types_terminal_œÄ (Œ± : Type u) : (terminal.œÄ Œ±) = Œª a, punit.star := by obviously

instance : has_binary_products.{u+1 u} (Type u) :=
{ span := Œª Y Z, { X := Y √ó Z, œÄ‚ÇÅ := prod.fst, œÄ‚ÇÇ := prod.snd } }

@[simp] lemma types_prod (Y Z : Type u) : limits.prod Y Z = (Y √ó Z) := rfl
@[simp] lemma types_prod_œÄ‚ÇÅ (Y Z : Type u) : limits.prod.œÄ‚ÇÅ Y Z = prod.fst := rfl.
@[simp] lemma types_prod_œÄ‚ÇÇ (Y Z : Type u) : limits.prod.œÄ‚ÇÇ Y Z = prod.snd := rfl.
@[simp] lemma types_prod_swap (Y Z : Type u) : limits.prod.swap Y Z = Œª p : Y √ó Z, (p.2, p.1) := rfl
@[simp] lemma types_prod_map {Y Y' Z Z' : Type u} (f : Y ‚ü∂ Y') (g : Z ‚ü∂ Z') : limits.prod.map f g = Œª p : Y √ó Z, (f p.1, g p.2) := rfl
@[simp] lemma types_prod_lift {X Y Z : Type u} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z):
  limits.prod.lift f g = Œª x, (f x, g x) := rfl

instance : has_products.{u+1 u} (Type u) :=
{ fan := Œª Œ≤ f, { X := Œ† b, f b, œÄ := Œª b x, x b },
  is_product :=
  begin
    tidy,
    rw ‚Üê w x_1,
    refl,
  end }.

@[simp] lemma types_pi {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) : limits.pi f = Œ† b, f b := rfl
@[simp] lemma types_pi_œÄ {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (b : Œ≤) : pi.œÄ f b = Œª (g : Œ† b, f b), g b := rfl.
@[simp] lemma types_pi_pre {Œ≤ Œ± : Type u} (f : Œ± ‚Üí Type u) (g : Œ≤ ‚Üí Type u) (h : Œ≤ ‚Üí Œ±) :
  pi.pre f h = Œª (d : Œ† a, f a), Œª b, d (h b) := rfl
@[simp] lemma types_pi_map {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (g : Œ≤ ‚Üí Type u) (k : Œ† b, f b ‚ü∂ g b) :
  pi.map k = Œª (d : Œ† a, f a), (Œª (b : Œ≤), k b (d b)) := rfl
@[simp] lemma types_pi_lift {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) {P : Type u} (p : Œ† b, P ‚ü∂ f b) :
  pi.lift p = Œª q b, p b q := rfl

attribute [extensionality] subtype.eq

instance : has_equalizers.{u+1 u} (Type u) :=
{ fork := Œª Y Z f g, { X := { y : Y // f y = g y }, Œπ := subtype.val },
  is_equalizer :=
  begin
    tidy,
    have swa := congr_fun s.w a,
    exact swa,
  end }

instance : has_pullbacks.{u+1 u} (Type u) :=
{ square := Œª Y‚ÇÅ Y‚ÇÇ Z r‚ÇÅ r‚ÇÇ,
  { X := { z : Y‚ÇÅ √ó Y‚ÇÇ // r‚ÇÅ z.1 = r‚ÇÇ z.2 },
    œÄ‚ÇÅ := Œª z, z.val.1,
    œÄ‚ÇÇ := Œª z, z.val.2 },
  is_pullback := Œª Y‚ÇÅ Y‚ÇÇ Z r‚ÇÅ r‚ÇÇ,
  begin
    refine { lift := Œª s x, ‚ü® (s.œÄ‚ÇÅ x, s.œÄ‚ÇÇ x), _ ‚ü©,
             fac‚ÇÅ' := _,
             fac‚ÇÇ' := _,
             uniq' := _  },
    tidy,
    have swa := congr_fun s.w x,
    exact swa,
  end }

instance : has_initial_object.{u+1 u} (Type u) :=
{ initial := pempty }

@[simp] lemma types_initial : (initial (Type u)) = pempty := rfl
@[simp] lemma types_initial_Œπ (Œ± : Type u) : (initial.Œπ Œ±) = pempty.rec _ := rfl

instance : has_binary_coproducts.{u+1 u} (Type u) :=
{ cospan := Œª Y Z, { X := Y ‚äï Z, Œπ‚ÇÅ := sum.inl, Œπ‚ÇÇ := sum.inr } }

@[simp] lemma types_coprod (Y Z : Type u) : limits.coprod Y Z = (Y ‚äï Z) := rfl
@[simp] lemma types_coprod_Œπ‚ÇÅ (Y Z : Type u) : limits.coprod.Œπ‚ÇÅ Y Z = sum.inl := rfl.
@[simp] lemma types_coprod_Œπ‚ÇÇ (Y Z : Type u) : limits.coprod.Œπ‚ÇÇ Y Z = sum.inr := rfl.
@[simp] lemma types_coprod_swap (Y Z : Type u) : limits.coprod.swap Y Z = sum.swap := by obviously
@[simp] lemma types_coprod_map {Y Y' Z Z' : Type u} (f : Y ‚ü∂ Y') (g : Z ‚ü∂ Z') :
  limits.coprod.map f g = sum.map f g := by obviously
@[simp] lemma types_coprod_desc {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z):
  limits.coprod.desc f g = Œª p, sum.rec f g p := rfl

instance : has_coproducts.{u+1 u} (Type u) :=
{ cofan := Œª Œ≤ f, { X := Œ£ b, f b, Œπ := Œª b x, ‚ü®b, x‚ü© } }.

@[simp] lemma types_sigma {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) : limits.sigma f = Œ£ b, f b := rfl
@[simp] lemma types_sigma_Œπ {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (b : Œ≤) : limits.sigma.Œπ f b = Œª p : f b, (‚ü®b, p‚ü© : Œ£ b, f b) := rfl
@[simp] lemma types_sigma_pre {Œ≤ Œ± : Type u} (f : Œ± ‚Üí Type u) (h : Œ≤ ‚Üí Œ±) :
  limits.sigma.pre f h = Œª (d : Œ£ b, f (h b)), (‚ü®h d.1, d.2‚ü© : Œ£ a, f a) := by obviously
@[simp] lemma types_sigma_map {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) (g : Œ≤ ‚Üí Type u) (k : Œ† b, f b ‚ü∂ g b) :
  limits.sigma.map k = Œª (d : Œ£ b, f b), ‚ü®d.1, k d.1 d.2‚ü© := by obviously
@[simp] lemma types_sigma_desc {Œ≤ : Type u} (f : Œ≤ ‚Üí Type u) {P : Type u} (p : Œ† b, f b ‚ü∂ P) :
  limits.sigma.desc p = (Œª d : Œ£ b, f b, p d.1 d.2) := by obviously

local attribute [elab_with_expected_type] quot.lift

def pushout {Y‚ÇÅ Y‚ÇÇ Z : Type u} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ) : cosquare r‚ÇÅ r‚ÇÇ :=
{ X := @quot (Y‚ÇÅ ‚äï Y‚ÇÇ) (Œª p p', ‚àÉ z : Z, p = sum.inl (r‚ÇÅ z) ‚àß p' = sum.inr (r‚ÇÇ z) ),
  Œπ‚ÇÅ := Œª o, quot.mk _ (sum.inl o),
  Œπ‚ÇÇ := Œª o, quot.mk _ (sum.inr o),
  w' := funext $ Œª z, quot.sound ‚ü® z, by tidy ‚ü©, }.

def pushout_is_pushout {Y‚ÇÅ Y‚ÇÇ Z : Type u} (r‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (r‚ÇÇ : Z ‚ü∂ Y‚ÇÇ) : is_pushout (pushout r‚ÇÅ r‚ÇÇ) :=
{ desc := Œª s, quot.lift (Œª o, sum.cases_on o s.Œπ‚ÇÅ s.Œπ‚ÇÇ)
            (assume o o' ‚ü®z, hz‚ü©, begin rw hz.left, rw hz.right, dsimp, exact congr_fun s.w z end) }

instance : has_pushouts.{u+1 u} (Type u) :=
{ cosquare := @pushout, is_pushout := @pushout_is_pushout }

def coequalizer {Y Z : Type u} (f g : Y ‚ü∂ Z) : cofork f g :=
{ X := @quot Z (Œª z z', ‚àÉ y : Y, z = f y ‚àß z' = g y),
  œÄ := Œª z, quot.mk _ z,
  w' := funext $ Œª x, quot.sound ‚ü® x, by tidy ‚ü© }.

def coequalizer_is_coequalizer {Y Z : Type u} (f g : Y ‚ü∂ Z) : is_coequalizer (coequalizer f g) :=
{ desc := Œª s, quot.lift (Œª (z : Z), s.œÄ z)
    (assume z z' ‚ü®y, hy‚ü©, begin rw hy.left, rw hy.right, exact congr_fun s.w y, end) }

instance : has_coequalizers.{u+1 u} (Type u) :=
{ cofork := @coequalizer, is_coequalizer := @coequalizer_is_coequalizer }

variables {J : Type u} [ùí• : small_category J]
include ùí•

def limit (F : J ‚•§ Type u) : cone F :=
{ X := {u : Œ† j, F j // ‚àÄ (j j' : J) (f : j ‚ü∂ j'), F.map f (u j) = u j'},
  œÄ := Œª j u, u.val j }

def limit_is_limit (F : J ‚•§ Type u) : is_limit (limit F) :=
{ lift := Œª s v, ‚ü®Œª j, s.œÄ j v, Œª j j' f, congr_fun (s.w f) _‚ü©,
  uniq' :=
  begin
    tidy,
    have h := congr_fun (w x_1) x,
    exact h
  end }

instance : has_limits.{u+1 u} (Type u) :=
{ cone := @limit, is_limit := @limit_is_limit }

@[simp] lemma types_limit (F : J ‚•§ Type u) :
  limits.limit F = {u : Œ† j, F j // ‚àÄ j j' f, F.map f (u j) = u j'} := rfl
@[simp] lemma types_limit_œÄ (F : J ‚•§ Type u) (j : J) :
  limit.œÄ F j = Œª g : (limit F).X, g.val j := rfl.
@[simp] lemma types_limit_pre (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) :
  limit.pre F E = Œª g : (limit F).X, (‚ü® Œª k, g.val (E k), by obviously ‚ü© : (limit (E ‚ãô F)).X) := rfl
@[simp] lemma types_limit_map {F G : J ‚•§ Type u} (Œ± : F ‚üπ G) :
  lim.map Œ± =
  Œª g : (limit F).X, (‚ü® Œª j, (Œ± j) (g.val j), Œª j j' f,
                        by rw [‚Üêfunctor_to_types.naturality, ‚Üê(g.property j j' f)] ‚ü© : (limit G).X) :=
rfl
@[simp] lemma types_limit_lift (F : J ‚•§ Type u) (c : cone F) :
  limit.lift F c = Œª x, (‚ü® Œª j, c.œÄ j x, Œª j j' f, congr_fun (c.w f) x ‚ü© : (limit F).X) := rfl

def colimit (F : J ‚•§ Type u) : cocone F :=
{ X := @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2),
  Œπ := Œª j x, quot.mk _ ‚ü®j, x‚ü©,
  w' := Œª j j' f, funext $ Œª x, eq.symm (quot.sound ‚ü®f, rfl‚ü©) }

def colimit_is_colimit (F : J ‚•§ Type u) : is_colimit (colimit F) :=
{ desc := Œª s, quot.lift (Œª (p : Œ£ j, F j), s.Œπ p.1 p.2)
    (assume ‚ü®j, x‚ü© ‚ü®j', x'‚ü© ‚ü®f, hf‚ü©,
      by rw hf; exact (congr_fun (s.w f) x).symm) }

instance : has_colimits.{u+1 u} (Type u) :=
{ cocone := @colimit, is_colimit := @colimit_is_colimit }

@[simp] lemma types_colimit (F : J ‚•§ Type u) : limits.colimit F = @quot (Œ£ j, F j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2) := rfl
@[simp] lemma types_colimit_Œπ (F : J ‚•§ Type u) (j : J) : colimit.Œπ F j = Œª x, quot.mk _ (‚ü®j, x‚ü© : (Œ£ j, F j)) := rfl.
-- TODO remaining lemmas:
-- @[simp] lemma types_colimit_pre (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) :
--   colimit.pre F E = Œª g : (colimit (E ‚ãô F)).X, sorry := sorry
-- @[simp] lemma types_colimit_map {F G : J ‚•§ Type u} (Œ± : F ‚üπ G) :
--   colim.map Œ± = Œª g : (colimit F).X, sorry := sorry
-- @[simp] lemma types_colimit_lift (F : J ‚•§ Type u) (c : cocone F) :
--   colimit.desc F c = Œª x, sorry := sorry

end category_theory.universal.types
