-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Tim Baumann, Stephen Morgan, Scott Morrison

import .isomorphism
import .functor_categories

open categories
open categories.isomorphism
open categories.functor
open categories.functor_categories

namespace categories.natural_transformation

universes u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

variable {C : Type (u‚ÇÅ+1)}
variable [category C]
variable {D : Type (u‚ÇÇ+1)}
variable [category D]

definition NaturalIsomorphism (F G : C ‚Üù D) := F ‚âÖ G

infix ` ‚áî `:10 := NaturalIsomorphism -- type as \<=>

-- It's a pity we need to separately define this coercion.
-- Ideally the coercion from Isomorphism along .morphism would just apply here.
-- Somehow we want the definition above to be more transparent?
instance NaturalIsomorphism_coercion_to_NaturalTransformation (F G : C ‚Üù D) : has_coe (F ‚áî G) (F ‚üπ G) :=
  {coe := Isomorphism.morphism}

variables {F G H : C ‚Üù D}

@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_1
  (Œ± : F ‚áî G)
  (X : C)
   : (Œ±.morphism.components X) ‚â´ (Œ±.inverse.components X) = ùüô (F X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) Œ±.witness_1
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_1_assoc
  (Œ± : NaturalIsomorphism F G)
  (X : C) (Z : D) (f : Hom (F X) Z)
   : (Œ±.morphism.components X) ‚â´ (Œ±.inverse.components X) ‚â´ f = f
   := begin rw ‚Üê category.associativity, simp end
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_2
  (Œ± : NaturalIsomorphism F G)
  (X : C)
   : (Œ±.inverse.components X) ‚â´ (Œ±.morphism.components X) = ùüô (G X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) Œ±.witness_2
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_2_assoc
  (Œ± : NaturalIsomorphism F G)
  (X : C) (Z : D) (f : Hom (G X) Z)
   : (Œ±.inverse.components X) ‚â´ (Œ±.morphism.components X) ‚â´ f = f
   := begin rw ‚Üê category.associativity, simp end

@[ematch] lemma {u1 v1 u2 v2} NaturalIsomorphism.naturality_1 
  (Œ± : NaturalIsomorphism F G)
  {X Y : C}
  (f : Hom X Y)
   : (Œ±.inverse.components X) ‚â´ (F &> f) ‚â´ (Œ±.morphism.components Y) = G &> f := ‚ôØ

@[ematch] lemma {u1 v1 u2 v2} NaturalIsomorphism.naturality_2 
  (Œ± : NaturalIsomorphism F G)
  {X Y : C}
  (f : Hom X Y)
   : (Œ±.morphism.components X) ‚â´ (G &> f) ‚â´ (Œ±.inverse.components Y) = F &> f := ‚ôØ

definition NaturalIsomorphism.from_components
  (components : ‚àÄ X : C, Isomorphism (F X) (G X))
  (naturality : ‚àÄ {X Y : C} (f : Hom X Y), (F &> f) ‚â´ (components Y).morphism = (components X).morphism ‚â´ (G &> f)) : NaturalIsomorphism F G :=
  {
    morphism  := {
      components := Œª X, (components X).morphism,
   },
    inverse   := {
      components := Œª X, (components X).inverse,
      naturality := Œª X Y f, begin
                               let p := congr_arg (Œª f, (components X).inverse ‚â´ (f ‚â´ (components Y).inverse)) (eq.symm (naturality f)),
                               simp at p,
                               exact p,
                             end
   }
 }

definition vertical_composition_of_NaturalIsomorphisms 
  (Œ± : NaturalIsomorphism F G)
  (Œ≤ : NaturalIsomorphism G H)
   : NaturalIsomorphism F H :=
  IsomorphismComposition Œ± Œ≤

attribute [reducible] NaturalIsomorphism

-- TODO is this actually used?
-- New type for isomorphisms in functor categories. This specialisation helps type inference.
-- structure NaturalIsomorphism' (F G : Functor C D) :=
--   mkNatIso :: (iso : Isomorphism F G)

-- infix `‚âÖ‚Çô`:50 := NaturalIsomorphism'

-- @[trans] definition NaturalIsomorphismComposition
--   (Œ± : F ‚âÖ‚Çô G) (Œ≤ : G ‚âÖ‚Çô H) : F ‚âÖ‚Çô H :=
--   NaturalIsomorphism'.mkNatIso (vertical_composition_of_NaturalIsomorphisms Œ±.iso Œ≤.iso)

open NaturalTransformation

definition is_NaturalIsomorphism  (Œ± : F ‚üπ G) := @is_Isomorphism (C ‚Üù D) _ F G Œ±

@[ematch] lemma is_NaturalIsomorphism_componentwise_witness_1
  (Œ± : NaturalTransformation F G)
  (w : is_NaturalIsomorphism Œ±)
  (X : C)
   : (Œ±.components X) ‚â´ (w.inverse.components X) = ùüô (F X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) w.witness_1
@[ematch] lemma is_NaturalIsomorphism_componentwise_witness_2
  (Œ± : NaturalTransformation F G)
  (w : is_NaturalIsomorphism Œ±)
  (X : C)
   : (w.inverse.components X) ‚â´ (Œ±.components X) = ùüô (G X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) w.witness_2


lemma IdentityNaturalTransformation_is_NaturalIsomorphism (F : C ‚Üù D) : is_NaturalIsomorphism (1 : F ‚üπ F) := {
    inverse := 1
}

definition NaturalIsomorphism.components {F G : C ‚Üù D} (Œ± : F ‚áî G) (X : C) : (F X) ‚âÖ (G X) := {
    morphism := Œ±.morphism.components X,
    inverse := Œ±.inverse.components X
}

definition NaturalIsomorphism.reverse {F G : C ‚Üù D} (Œ± : F ‚áî G) : G ‚áî F := {
    morphism := Œ±.inverse,
    inverse := Œ±.morphism
}

end categories.natural_transformation
