-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import categories.walking
import categories.discrete_category
import categories.universal.initial

open categories
open categories.isomorphism
open categories.functor
open categories.natural_transformation
open categories.functor_categories
open categories.initial
open categories.walking

namespace categories.comma

universes j u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ

-- The diagonal functor sends X to the constant functor that sends everything to X.
definition DiagonalFunctor (J : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} J] (C : Type u‚ÇÇ) [category.{u‚ÇÇ v‚ÇÇ} C] : C ‚Üù (J ‚Üù C) :=
{ onObjects     := Œª X : C, 
    { onObjects     := Œª _, X,
      onMorphisms   := Œª _ _ _, ùüô X },
  onMorphisms   := Œª X Y f, 
    { components := Œª _, f } }

definition ObjectAsFunctor {C : Type u‚ÇÉ} [category.{u‚ÇÉ v‚ÇÉ} C] (X : C) : Functor.{u‚ÇÉ v‚ÇÉ u‚ÇÉ v‚ÇÉ} punit C := 
{ onObjects     := Œª _, X,
  onMorphisms   := Œª _ _ _, ùüô X }

section
local attribute [ematch] subtype.property

variable {A : Type u‚ÇÅ}
variable [ùíú : category.{u‚ÇÅ v‚ÇÅ} A]
variable {B : Type u‚ÇÇ}
variable [‚Ñ¨ : category.{u‚ÇÇ v‚ÇÇ} B]
variable {C : Type u‚ÇÉ}
variable [ùíû : category.{u‚ÇÉ v‚ÇÉ} C]
include ùíú ‚Ñ¨ ùíû

definition comma (S : A ‚Üù C) (T : B ‚Üù C) : Type (max u‚ÇÅ u‚ÇÇ v‚ÇÉ) := Œ£ p : A √ó B, (S +> p.1) ‚ü∂ (T +> p.2)

structure comma_morphism {S : A ‚Üù C} {T : B ‚Üù C} (p q : comma S T) : Type (max v‚ÇÅ v‚ÇÇ):=
(left : p.1.1 ‚ü∂ q.1.1)
(right : p.1.2 ‚ü∂ q.1.2)
(condition : (S &> left) ‚â´ q.2 = p.2 ‚â´ (T &> right) . obviously)

make_lemma comma_morphism.condition
attribute [ematch] comma_morphism.condition_lemma

@[extensionality] lemma comma_morphism_equal
  {S : A ‚Üù C} {T : B ‚Üù C} {p q : comma S T} (f g : comma_morphism p q)
  (wl : f.left = g.left) (wr : f.right = g.right) : f = g :=
  begin
    induction f,
    induction g,
    tidy,
  end

instance CommaCategory (S : A ‚Üù C) (T : B ‚Üù C) : category.{(max u‚ÇÅ u‚ÇÇ v‚ÇÉ) (max v‚ÇÅ v‚ÇÇ)} (comma S T) :=
{ Hom      := Œª p q, comma_morphism p q,
  identity := Œª p, ‚ü® ùüô p.1.1, ùüô p.1.2, by obviously ‚ü©,
  compose  := Œª p q r f g, ‚ü® f.left ‚â´ g.left, f.right ‚â´ g.right, by obviously ‚ü© }

-- cf Leinster Remark 2.3.2
definition CommaCategory_left_projection (S : A ‚Üù C) (T : B ‚Üù C) : (comma S T) ‚Üù A := {
  onObjects     := Œª X, X.1.1,
  onMorphisms   := Œª _ _ f, f.left
}

definition CommaCategory_right_projection (S : A ‚Üù C) (T : B ‚Üù C) : (comma S T) ‚Üù B := {
  onObjects     := Œª X, X.1.2,
  onMorphisms   := Œª _ _ f, f.right
}

definition CommaCategory_projection_transformation (S : A ‚Üù C) (T : B ‚Üù C) : ((CommaCategory_left_projection S T) ‚ãô S) ‚üπ ((CommaCategory_right_projection S T) ‚ãô T) := 
{ components := Œª X, X.2 }

-- Notice that if C is large, these are large, and if C is small, these are small.
definition SliceCategory   (X : C) : category.{(max u‚ÇÉ v‚ÇÉ) v‚ÇÉ} (comma (IdentityFunctor C) (ObjectAsFunctor X)) := by apply_instance
definition CosliceCategory (X : C) : category.{(max u‚ÇÉ v‚ÇÉ) v‚ÇÉ} (comma (ObjectAsFunctor X) (IdentityFunctor C)) := by apply_instance
end

-- In Cones, we have
--   A = C
--   B = .
--   C = FunctorCategory J C
variable {J : Type v‚ÇÅ}
variable [small_category J]
variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

definition Cone   (F : J ‚Üù C) := (comma (DiagonalFunctor.{v‚ÇÅ v‚ÇÅ u‚ÇÅ v‚ÇÅ} J C) (ObjectAsFunctor F))
definition Cocone (F : J ‚Üù C) := (comma (ObjectAsFunctor F)                   (DiagonalFunctor.{v‚ÇÅ v‚ÇÅ u‚ÇÅ v‚ÇÅ} J C))

@[simp] lemma Cone_comma_unit   (F : J ‚Üù C) (X : Cone F)   : X.1.2 = punit.star := by obviously 
@[simp] lemma Cocone_comma_unit (F : J ‚Üù C) (X : Cocone F) : X.1.1 = punit.star := by obviously 

instance Cones   (F : J ‚Üù C) : category (Cone F)   := begin unfold Cone, apply_instance end
instance Cocones (F : J ‚Üù C) : category (Cocone F) := begin unfold Cocone, apply_instance end

definition Limit   (F: J ‚Üù C) := TerminalObject (Cone   F)
definition Colimit (F: J ‚Üù C) := InitialObject  (Cocone F)

definition BinaryProduct   (Œ± Œ≤ : C)                  := Limit   (Pair_functor.{u‚ÇÅ v‚ÇÅ} Œ± Œ≤)
definition BinaryCoproduct (Œ± Œ≤ : C)                  := Colimit (Pair_functor Œ± Œ≤)
definition Equalizer       {Œ± Œ≤ : C} (f g : Œ± ‚ü∂ Œ≤)  := Limit   (ParallelPair_functor f g)
definition Coequalizer     {Œ± Œ≤ : C} (f g : Œ± ‚ü∂ Œ≤)  := Colimit (ParallelPair_functor f g)

end categories.comma

