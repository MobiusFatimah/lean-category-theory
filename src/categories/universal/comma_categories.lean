-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import ..walking
import ..discrete_category
import .initial

open categories
open categories.isomorphism
open categories.functor
open categories.natural_transformation
open categories.functor_categories
open categories.initial
open categories.walking

namespace categories.comma

universes j u‚ÇÅ u‚ÇÇ u‚ÇÉ

-- The diagonal functor sends X to the constant functor that sends everything to X.
definition DiagonalFunctor (J : Type (j+1)) [category J] (C : Type (u‚ÇÅ+1)) [category C] : C ‚Üù (J ‚Üù C) :=
{
  onObjects     := Œª X : C, {
    onObjects     := Œª _, X,
    onMorphisms   := Œª _ _ _, ùüô X
 },
  onMorphisms   := Œª X Y f, {
    components := Œª _, f
 }
}

section
local attribute [ematch] subtype.property

variable {A : Type (u‚ÇÅ+1)}
variable [category A]
variable {B : Type (u‚ÇÇ+1)}
variable [category B]
variable {C : Type (u‚ÇÉ+2)}
variable [category C]

definition comma (S : A ‚Üù C) (T : B ‚Üù C) : Type ((max u‚ÇÅ u‚ÇÇ u‚ÇÉ)+1) := Œ£ p : A √ó B, Hom (S p.1) (T p.2)

structure comma_morphism {S : A ‚Üù C} {T : B ‚Üù C} (p q : comma S T) : Type (max u‚ÇÅ u‚ÇÇ u‚ÇÉ) :=
(left : Hom p.1.1 q.1.1)
(right : Hom p.1.2 q.1.2)
(condition : (S &> left) ‚â´ q.2 = p.2 ‚â´ (T &> right) . obviously)

make_lemma comma_morphism.condition
attribute [ematch] comma_morphism.condition_lemma

@[applicable] lemma comma_morphism_equal
  {S : A ‚Üù C} {T : B ‚Üù C} {p q : comma S T} (f g : comma_morphism p q)
  (wl : f.left = g.left) (wr : f.right = g.right) : f = g :=
  begin
    induction f,
    induction g,
    tidy,
  end


instance CommaCategory (S : A ‚Üù C) (T : B ‚Üù C) : category (comma S T) := {
  Hom      := Œª p q, comma_morphism p q,
  identity := Œª p, ‚ü® ùüô p.1.1, ùüô p.1.2, ‚ôØ ‚ü©,
  compose  := Œª p q r f g, ‚ü® f.left ‚â´ g.left, f.right ‚â´ g.right, ‚ôØ ‚ü©
}

-- cf Leinster Remark 2.3.2
definition CommaCategory_left_projection (S : A ‚Üù C) (T : B ‚Üù C) : (comma S T) ‚Üù A := {
  onObjects     := Œª X, X.1.1,
  onMorphisms   := Œª _ _ f, f.left
}

definition CommaCategory_right_projection (S : A ‚Üù C) (T : B ‚Üù C) : (comma S T) ‚Üù B := {
  onObjects     := Œª X, X.1.2,
  onMorphisms   := Œª _ _ f, f.right
}

definition CommaCategory_projection_transformation
  (S : A ‚Üù C) (T : B ‚Üù C)
    : ((CommaCategory_left_projection S T) ‚ãô S) ‚üπ ((CommaCategory_right_projection S T) ‚ãô T) := {
      components := Œª X, X.2
   }


definition ObjectAsFunctor (X : C) : punit ‚Üù C := {
  onObjects     := Œª _, X,
  onMorphisms   := Œª _ _ _, ùüô X
}

instance : has_coe C (punit ‚Üù C) :=
{ coe := ObjectAsFunctor }

definition SliceCategory   (X : C) : category (comma (1 : C ‚Üù C) (X : punit ‚Üù C)) := by apply_instance
definition CosliceCategory (X : C) : category (comma (X : punit ‚Üù C) (1 : C ‚Üù C)) := by apply_instance
end

-- In Cones, we have
--   A = C
--   B = .
--   C = FunctorCategory J C
variable {J : Type (j+1)}
variable [category J]
variable {C : Type (u‚ÇÅ+2)}
variable [category C]

definition Cone   (F : Functor J C) := (comma (DiagonalFunctor.{j (u‚ÇÅ+1)} J C) (ObjectAsFunctor F))
definition Cocone (F : Functor J C) := (comma (ObjectAsFunctor F)              (DiagonalFunctor.{j (u‚ÇÅ+1)} J C))

@[simp] lemma Cone_comma_unit   (F : Functor J C) (X : Cone F) : X.1.2 = punit.star := ‚ôØ 
@[simp] lemma Cocone_comma_unit (F : Functor J C) (X : Cocone F) : X.1.1 = punit.star := ‚ôØ 

instance Cones   (F : Functor J C) : category (Cone F)   := begin unfold Cone, apply_instance end
instance Cocones (F : Functor J C) : category (Cocone F) := begin unfold Cocone, apply_instance end

definition Limit   (F: Functor J C) := TerminalObject (Cone   F)
definition Colimit (F: Functor J C) := InitialObject  (Cocone F)

-- TODO clean this up: WalkingPair and WalkingParallelPair should just have different object types
definition BinaryProduct   (Œ± Œ≤ : C)                  := Limit   (Pair_functor Œ± Œ≤)
definition BinaryCoproduct (Œ± Œ≤ : C)                  := Colimit (Pair_functor Œ± Œ≤)
definition Product         {I : Type (u‚ÇÅ+1)} (X : I ‚Üí C) := Limit   (Functor.fromFunction X)
definition Coproduct       {I : Type (u‚ÇÅ+1)} (X : I ‚Üí C) := Colimit (Functor.fromFunction X)
definition Equalizer       {Œ± Œ≤ : C} (f g : Hom Œ± Œ≤)  := Limit   (ParallelPair_functor f g)
definition Coequalizer     {Œ± Œ≤ : C} (f g : Hom Œ± Œ≤)  := Colimit (ParallelPair_functor f g)

end categories.comma

