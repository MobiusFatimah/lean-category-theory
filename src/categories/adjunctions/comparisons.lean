-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import categories.adjunctions
import categories.adjunctions.hom_adjunction

open category_theory
open category_theory.types

namespace category_theory.adjunctions

universes u

variable {C : Type (u+1)}
variable [large_category C]
variable {D : Type (u+1)}
variable [large_category D]
variables {L : C ‚Üù D} {R : D ‚Üù C} 

@[reducible] private definition Adjunction_to_HomAdjunction_morphism (A : L ‚ä£ R) 
  : ((OppositeFunctor L √ó Functor.id D) ‚ãô (HomPairing D)) ‚üπ 
                          ((Functor.id (C·µí·µñ) √ó R) ‚ãô (HomPairing C)) := 
{ components := Œª P, 
    -- We need to construct the map from D.Hom (L P.1) P.2 to C.Hom P.1 (R P.2)
    Œª f, (A.unit.components P.1) ‚â´ (R &> f) }

@[reducible] private definition Adjunction_to_HomAdjunction_inverse (A : L ‚ä£ R) 
  : ((Functor.id (C·µí·µñ) √ó R) ‚ãô (HomPairing C)) ‚üπ 
                          ((OppositeFunctor L √ó Functor.id D) ‚ãô (HomPairing D)) :=
{ components := Œª P, 
    -- We need to construct the map back to D.Hom (L P.1) P.2 from C.Hom P.1 (R P.2)
    Œª f, (L &> f) ‚â´ (A.counit.components P.2) }

definition Adjunction_to_HomAdjunction (A : L ‚ä£ R) : HomAdjunction L R := 
{ morphism  := Adjunction_to_HomAdjunction_morphism A,
  inverse   := Adjunction_to_HomAdjunction_inverse A }

local attribute [tidy] dsimp_all'

@[simp] lemma mate_of_L (A : HomAdjunction L R) {X Y : C} (f : X ‚ü∂ Y) : (((A.morphism).components (X, L +> X)) (ùüô (L +> X))) ‚â´ 
      (R &> (L &> f))
      = ((A.morphism).components (X, L +> Y)) (L &> f) :=
begin
  have p := @NaturalTransformation.naturality _ _ _ _ _ _ A.morphism (X, L +> X) (X, L +> Y) (ùüô X, L &> f),
  have q := congr_fun p (L &> (ùüô X)),
  tidy,
end

@[simp] lemma mate_of_L' (A : HomAdjunction L R) {X Y : C} (f : X ‚ü∂ Y) : f ‚â´ (((A.morphism).components (Y, L +> Y)) (ùüô (L +> Y)))
      = ((A.morphism).components (X, L +> Y)) (L &> f) :=
begin
  have p := @NaturalTransformation.naturality _ _ _ _ _ _ A.morphism (Y, L +> Y) (X, L +> Y) (f, ùüô (L +> Y)),
  have q := congr_fun p (L &> (ùüô Y)),
  tidy,
end

@[simp] lemma mate_of_R (A : HomAdjunction L R) {X Y : D} (f : X ‚ü∂ Y) : (L &> (R &> f)) ‚â´ (((A.inverse).components (R.onObjects Y, Y)) (ùüô (R +> Y)))
      = ((A.inverse).components (R.onObjects X, Y)) (R &> f) :=
begin
  have p := @NaturalTransformation.naturality _ _ _ _ _ _ A.inverse (R.onObjects Y, Y) (R.onObjects X, Y) (R &> f, ùüô Y),
  have q := congr_fun p (R &> (ùüô Y)),
  tidy,
end

@[simp] lemma mate_of_R' (A : HomAdjunction L R) {X Y : D} (f : X ‚ü∂ Y) : (((A.inverse).components (R.onObjects X, X)) (ùüô (R +> X))) ‚â´ f = 
    ((A.inverse).components (R.onObjects X, Y)) (R &> f) :=
begin
  have p := @NaturalTransformation.naturality _ _ _ _ _ _ A.inverse (R.onObjects X, X) (R.onObjects X, Y) (ùüô (R.onObjects X), f),
  have q := congr_fun p (R &> (ùüô X)),
  tidy,
end

private definition counit_from_HomAdjunction (A : HomAdjunction L R) : (R ‚ãô L) ‚üπ 1 := {
    components := Œª X : D, (A.inverse.components (R.onObjects X, X)) (ùüô (R +> X)),
 }

private definition unit_from_HomAdjunction (A : HomAdjunction L R) : 1 ‚üπ (L ‚ãô R) := {
    components := Œª X : C, (A.morphism.components (X, L +> X)) (ùüô (L +> X)),
 }

-- PROJECT
-- definition HomAdjunction_to_Adjunction {L : C ‚Üù D} {R : D ‚Üù C} (A : HomAdjunction L R) : L ‚ä£ R := 
-- {
--   unit       := unit_from_HomAdjunction A,
--   counit     := counit_from_HomAdjunction A,
--   triangle_1 := begin
--                   tidy, 
--                   -- have p1 := A.witness_2,
--                   -- have p2 := congr_arg NaturalTransformation.components p1,
--                   -- have p3 := congr_fun p2 (((R +> X) : C), L +> (R +> X)),
--                   -- have p4 := congr_fun p3 (ùüô (R +> X)),
--                   -- tidy,
--                   sorry
--                 end,
--   triangle_2 := sorry
-- }

-- definition Adjunctions_agree (L : C ‚Üù D) (R : D ‚Üù C) : equiv (L ‚ä£ R) (HomAdjunction L R) := 
-- { to_fun    := Adjunction_to_HomAdjunction,
--   inv_fun   := HomAdjunction_to_Adjunction,
--   left_inv  := begin sorry end,
--   right_inv := begin
--                  sorry,
--                  -- this is just another lemma about mates; perhaps the same as the one we use above.
--                end }

end category_theory.adjunctions