-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import .functor
import .products
import .types

open categories
open categories.functor
open categories.products
open categories.types

namespace categories.opposites

universes u‚ÇÅ u‚ÇÇ

inductive op (C : Type u‚ÇÅ) : Type u‚ÇÅ
| op : C ‚Üí op

notation C `·µí·µñ` := op C

variable {C : Type u‚ÇÅ}
variable [category C]
variable {D : Type u‚ÇÇ}
variable [category D]

def op.of : C·µí·µñ  ‚Üí C
| (op.op X) := X

instance opposite_coercion_1 : has_coe (C·µí·µñ) C :=
  {coe := op.of}
instance opposite_coercion_2 : has_coe C (C·µí·µñ) :=
  {coe := op.op}

instance Opposite : category (C·µí·µñ):=
{
    Hom := Œª X Y, Hom (Y : C) (X : C),
    compose  := Œª _ _ _ f g, g >> f,
    identity := Œª X, ùüô X
}

definition OppositeFunctor (F : Functor C D) : Functor (C·µí·µñ) (D·µí·µñ) :=
{
  onObjects     := Œª X, F.onObjects X,
  onMorphisms   := Œª X Y f, F.onMorphisms f
}

definition HomPairing (C : Type u‚ÇÅ) : Functor ((C·µí·µñ) √ó C) (Type u‚ÇÅ) :=
{
  onObjects     := Œª p, C.Hom p.1 p.2,
  onMorphisms   := Œª _ _ f, Œª g, C.compose (C.compose f.1 g) f.2
}

-- PROJECT prove C^op^op is C
-- definition OppositeOpposite (C : Category) : Equivalence (Opposite (Opposite C)) C := sorry
-- PROJECT opposites preserve products, functors, slices.

local attribute [reducible] Opposite

@[simp,ematch] lemma ContravariantFunctor.functoriality
  {C : Category}
  {D : Category}
  {F : Functor (Opposite C) D}
  {X Y Z : C.Obj}
  {f : C.Hom X Y} {g : C.Hom Y Z} :
    F.onMorphisms (C.compose f g) = D.compose (F.onMorphisms g) (F.onMorphisms f) := ‚ôÆ 

@[simp,ematch] lemma ContravariantFunctor.identities
  {C : Category}
  {D : Category}
  {F : Functor (Opposite C) D}
  {X : C.Obj} :
    F.onMorphisms (C.identity X) = D.identity (F.onObjects X) := ‚ôÆ

end categories.opposites