-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.products
import categories.equivalence

open category_theory

namespace category_theory.prod

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ
variable (C : Type u‚ÇÅ)
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
variable (D : Type u‚ÇÇ)
variable [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
variable (E : Type u‚ÇÉ)
variable [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]
include ùíû ùíü ‚Ñ∞

local attribute [tidy] tactic.assumption

definition associator : ((C √ó D) √ó E) ‚Üù (C √ó (D √ó E)) := by obviously
-- { obj := Œª X, (X.1.1, (X.1.2, X.2)),
--   map := Œª _ _ f, (f.1.1, (f.1.2, f.2)) }

definition inverse_associator : (C √ó (D √ó E)) ‚Üù ((C √ó D) √ó E) := by obviously
-- { obj := Œª X, ((X.1, X.2.1), X.2.2),
--   map := Œª _ _ f, ((f.1, f.2.1), f.2.2) }

local attribute [backwards] category.id

-- FIXME looping??
-- definition associativity : Equivalence ((C √ó D) √ó E) (C √ó (D √ó E)) :=
-- { functor := associator C D E,
--   inverse := inverse_associator C D E, }

-- TODO pentagon natural transformation? satisfying?

end category_theory.prod
