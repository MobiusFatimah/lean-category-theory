-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import categories.products
import categories.equivalence

open categories
open categories.functor
open categories.natural_transformation

namespace categories.products

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ
variable (C : Type u‚ÇÅ)
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
variable (D : Type u‚ÇÇ)
variable [ùíü : category.{u‚ÇÇ v‚ÇÇ} D]
variable (E : Type u‚ÇÉ)
variable [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]
include ùíû ùíü ‚Ñ∞

-- PROJECT; by aggressively allowing "assumption" we could do this completely automatically
-- locally tag "assumption" with @[tidy]?
-- or define an aggressive version of tidy (perhaps "follow_your_nose"?)
definition ProductCategoryAssociator : ((C √ó D) √ó E) ‚Üù (C √ó (D √ó E)) :=
{ onObjects     := Œª X, (X.1.1, (X.1.2, X.2)),
  onMorphisms   := Œª _ _ f, (f.1.1, (f.1.2, f.2)) }

definition ProductCategoryInverseAssociator : (C √ó (D √ó E)) ‚Üù ((C √ó D) √ó E) :=
{ onObjects     := Œª X, ((X.1, X.2.1), X.2.2),
  onMorphisms   := Œª _ _ f, ((f.1, f.2.1), f.2.2) }


-- TODO prove the equivalence
-- open categories.equivalence

-- definition ProductCategoryAssociativity : Equivalence ((C √ó D) √ó E) (C √ó (D √ó E)) :=
-- { functor := ProductCategoryAssociator C D E,
--   inverse := ProductCategoryInverseAssociator C D E, }

-- TODO pentagon natural transformation? satisfying?

end categories.products
