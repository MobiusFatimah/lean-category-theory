-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import categories.category
import categories.functor

namespace categories

universes u‚ÇÅ u‚ÇÇ 

open categories.functor

local attribute [applicable] category.identity -- This says that whenever there is a goal of the form C.Hom X X, we can safely complete it with the identity morphism. This isn't universally true.

definition discrete (Œ± : Type u‚ÇÅ) := Œ±

instance  DiscreteCategory (Œ± : Type (u‚ÇÅ+1)) : category (discrete Œ±) := {
  Hom            := Œª X Y, ulift (plift (X = Y)),
  identity       := by obviously,
  compose        := by obviously
}

instance EmptyCategory : category pempty := (by apply_instance : category (discrete pempty))
instance OneCategory : category punit := (by apply_instance : category (discrete punit))

definition EmptyFunctor (C : Type (u‚ÇÇ+1)) [category C] : pempty ‚Üù C := by obviously

-- TODO find a home for these in mathlib. https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/transport.20through.20trivial.20bundles/near/125769004
@[simp] lemma plift.rec.constant {Œ± : Sort u‚ÇÅ} {Œ≤ : Sort u‚ÇÇ} (b : Œ≤) : @plift.rec Œ± (Œª _, Œ≤) (Œª _, b) = Œª _, b :=
begin 
  apply funext,
  intros,
  cases x,
  refl,
end
@[simp] lemma ulift.rec.constant {Œ± : Type u‚ÇÅ} {Œ≤ : Sort u‚ÇÇ} (b : Œ≤) : @ulift.rec Œ± (Œª _, Œ≤) (Œª _, b) = Œª _, b :=
begin 
  apply funext,
  intros,
  cases x,
  refl,
end

definition Functor.fromFunction {C : Type (u‚ÇÇ+1)} [category C] {I : Type (u‚ÇÅ+1)} (F : I ‚Üí C) : (discrete I) ‚Üù C := {
  onObjects     := F,
  onMorphisms   := Œª X Y f, begin cases f, cases f, cases f, exact ùüô (F X) end,
}

end categories
