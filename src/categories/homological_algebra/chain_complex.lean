/- Attempting to "live-formalise", from the PhD students reading group meeting on June 24 2018, starting at the beginning of homological algebra. -/

import category_theory.category
import categories.universal.instances

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

open category_theory
open category_theory.universal

class Ab_category (C: Type u‚ÇÅ) extends category.{u‚ÇÅ v‚ÇÅ} C := --- we really need to setup enriched categories
  (hom_groups : Œ† X Y : C, comm_group (X ‚ü∂ Y))
  (compose_is_homomorphism : Œ† X Y Z : C,     
    begin
    haveI : comm_group (X ‚ü∂ Y) := by apply_instance, -- we can get these, but not the product automatically?
    haveI : comm_group ((X ‚ü∂ Y) √ó (Y ‚ü∂ Z)) := by sorry, -- surely this should just appear magically.
    exact  is_group_hom (Œª p : (X ‚ü∂ Y) √ó (Y ‚ü∂ Z), p.1 ‚â´ p.2)
    end)


-- variables (C : Type u‚ÇÅ) [ùíû : Ab_category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [ùíü : Ab_category.{u‚ÇÇ v‚ÇÇ} D]

-- def additive_functor extends Functor C D := sorry

class additive_category (C : Type u‚ÇÅ) extends (Ab_category.{u‚ÇÅ v‚ÇÅ} C), (has_ZeroObject.{u‚ÇÅ v‚ÇÅ} C), (has_FiniteProducts.{u‚ÇÅ v‚ÇÅ} C)

/- Examples -/
/- Field is not additve, it doesn't have a zero object, or all products. -/
/- Abelian groups = Z-mod is an additive category. -/
/- mod-R, Vec_F, even dimensional vector spaces, are all additive categories -/

structure chain_complex (C : Type u‚ÇÅ) [additive_category.{u‚ÇÅ v‚ÇÅ} C] : Type (max u‚ÇÅ v‚ÇÅ) :=
  (chain_objects : ‚Ñ§ ‚Üí C)
  (differentials : Œ† n : ‚Ñ§, (chain_objects n) ‚ü∂ (chain_objects (n+1)))
  -- squares to zero!

structure chain_map {C : Type u‚ÇÅ} [additive_category C] (M N : chain_complex C) :=
  (component : Œ† n : ‚Ñ§, M.chain_objects n ‚ü∂ N.chain_objects n)
  (commutes : Œ† n : ‚Ñ§, component n ‚â´ N.differentials n = M.differentials n ‚â´ component (n+1))

class abelian_category (C : Type u‚ÇÅ) extends (additive_category.{u‚ÇÅ v‚ÇÅ} C)/-, (has_Equalizers.{u‚ÇÅ u‚ÇÇ} C), (has_Coequalizers.{u‚ÇÅ u‚ÇÇ} C)-/  . 
-- TODO: monics are regular 

instance category_of_chain_complexes {C : Type u‚ÇÅ} [additive_category.{u‚ÇÅ v‚ÇÅ} C] : category.{(max u‚ÇÅ v‚ÇÅ)} (chain_complex C) :=
{ hom := Œª M N, chain_map M N,
  comp := sorry,
  id := sorry,
  id_comp := sorry, comp_id := sorry, assoc := sorry
}

instance chain_complexes_are_abelian_too (C : Type u‚ÇÅ) [abelian_category.{u‚ÇÅ v‚ÇÅ} C] : abelian_category (chain_complex C) := sorry
-- mostly, work componentwise


-- cycles, boundaries, homology, quasi-isomorphism
-- Example: singular chains in a topological space
