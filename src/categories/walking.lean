-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.functor
import data.fintype
import categories.util.Two

open category_theory

namespace category_theory.walking

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

section
@[derive decidable_eq]
inductive WalkingPair : Type u‚ÇÅ
| _1
| _2

open WalkingPair

section
open tactic
@[tidy] private meta def induction_WalkingPair : tactic unit :=
do l ‚Üê local_context,
   at_least_one (l.reverse.map (Œª h, do t ‚Üê infer_type h, match t with | `(WalkingPair) := cases h >> skip | _ := failed end)),
   skip
end

attribute [tidy] induction_WalkingPair


-- instance fintype_WalkingPair : fintype WalkingPair := {
--   elems := [_1, _2].to_finset,
--   complete := by obviously
-- }

open tactic
private meta def case_bash : tactic unit :=
do l ‚Üê local_context,
   at_least_one (l.reverse.map (Œª h, cases h >> skip)),
   skip

local attribute [tidy] case_bash

@[reducible] def WalkingPair.hom : WalkingPair ‚Üí WalkingPair ‚Üí Type u‚ÇÅ 
| _1 _1 := punit
| _2 _2 := punit
| _  _  := pempty
attribute [reducible] WalkingPair.hom._main

instance WalkingPair_category : small_category WalkingPair := 
{ Hom  := WalkingPair.hom,
  id   := by tidy,
  comp := by tidy }

local attribute [backwards] category.id

variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

@[reducible] def Pair_functor.onObjects (Œ± Œ≤ : C) : WalkingPair ‚Üí C
| _1 := Œ±
| _2 := Œ≤ 
attribute [reducible] Pair_functor.onObjects._main
@[reducible] def Pair_functor.onMorphisms (Œ± Œ≤ : C) (X Y : WalkingPair) (f : X ‚ü∂ Y) : (Pair_functor.onObjects Œ± Œ≤ X) ‚ü∂ (Pair_functor.onObjects Œ± Œ≤ Y) :=
match X, Y, f with
| _1, _1, _ := ùüô Œ± 
| _2, _2, _ := ùüô Œ≤
end
attribute [reducible] Pair_functor.onMorphisms._match_1

def Pair_functor (Œ± Œ≤ : C) : WalkingPair.{v‚ÇÅ} ‚Üù C := 
{ obj := Pair_functor.onObjects Œ± Œ≤,
  map := Pair_functor.onMorphisms Œ± Œ≤, }

def Pair_functor' (Œ± Œ≤ : C) : WalkingPair.{v‚ÇÅ} ‚Üù C := 
{ obj := Œª X, match X with 
              | _1 := Œ± 
              | _2 := Œ≤
              end,
  map := Œª X Y f, match X, Y, f with
                  | _1, _1, _ := ùüô Œ± 
                  | _2, _2, _ := ùüô Œ≤
                  end, }
end

section
inductive WalkingParallelPair : Type u‚ÇÅ
| _1
| _2

open WalkingParallelPair



section
open tactic
private meta def induction_WalkingParallelPair : tactic unit :=
do l ‚Üê local_context,
   at_least_one (l.reverse.map (Œª h, do t ‚Üê infer_type h, match t with | `(WalkingParallelPair) := cases h >> skip | _ := failed end)),
   skip
   
attribute [tidy] induction_WalkingParallelPair
end

local attribute [tidy] case_bash

instance : small_category WalkingParallelPair := 
{ Hom := Œª X Y, match X, Y with
                | _1, _1 := punit
                | _2, _2 := punit
                | _1, _2 := Two
                | _2, _1 := pempty
                end,
  id       := by tidy,
  comp  := Œª X Y Z f g, match X, Y, Z, f, g with
                        | _1, _1, _1, _, _ := punit.star
                        | _2, _2, _2, _, _ := punit.star
                        | _1, _1, _2, _, h := h
                        | _1, _2, _2, h, _ := h
                        end }

variable {C : Type u‚ÇÅ}
variable [category.{u‚ÇÅ v‚ÇÅ} C]

def ParallelPair_functor {Œ± Œ≤ : C} (f g : Œ± ‚ü∂ Œ≤) : WalkingParallelPair.{v‚ÇÅ} ‚Üù C := 
{ obj := Œª X, match X with
              | _1 := Œ±
              | _2 := Œ≤
              end,
  map := Œª X Y h, match X, Y, h with
                  | _1, _1, _ := ùüô Œ±
                  | _2, _2, _ := ùüô Œ≤
                  | _1, _2, Two._0 := f
                  | _1, _2, Two._1 := g
                  end, }
end

end category_theory.walking

