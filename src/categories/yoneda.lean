-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.natural_transformation
import categories.opposites
import categories.products.switch
import categories.types
import categories.functor_categories.evaluation
import categories.universe_lifting
import categories.cancellation
import tactic.interactive

open category_theory

namespace category_theory.yoneda

universes uโ vโ uโ

section
variables (C : Type uโ) [๐ : category.{uโ vโ} C]
include ๐

-- We need to help typeclass inference with some awkward universe levels here.
instance instance_1 : category (((Cแตแต) โ Type vโ) ร (Cแตแต)) := category_theory.prod.{(max uโ (vโ+1)) (max uโ vโ) uโ vโ} (Cแตแต โ Type vโ) (Cแตแต)
instance instance_2 : category ((Cแตแต) ร ((Cแตแต) โ Type vโ)) := category_theory.prod.{uโ vโ (max uโ (vโ+1)) (max uโ vโ)} (Cแตแต) (Cแตแต โ Type vโ) 

def yoneda_evaluation : (((Cแตแต) โ (Type vโ)) ร (Cแตแต)) โ (Type (max uโ vโ)) 
  := (evaluation (Cแตแต) (Type vโ)) โ type_lift.{vโ uโ}

@[simp] lemma yoneda_evaluation_map_down (P Q : (Cแตแต โ Type vโ) ร  (Cแตแต)) (ฮฑ : P โถ Q) (x : (yoneda_evaluation C) P)
 : ((yoneda_evaluation C).map ฮฑ x).down = (ฮฑ.1) (Q.2) ((P.1).map (ฮฑ.2) (x.down)) := rfl

def yoneda : C โ ((Cแตแต) โ (Type vโ)) := 
{ obj := ฮป X,      { obj := ฮป Y, @category.Hom C _ Y X,
                     map := ฮป Y Y' f g, f โซ g },
  map := ฮป X X' f, { app := ฮป Y g, g โซ f } }

@[simp] lemma yoneda_obj_obj (X Y : C) : ((yoneda C) X) Y = (Y โถ X) := rfl
@[simp] lemma yoneda_obj_map (X : C) {Y Y' : C} (f : Y โถ Y') : ((yoneda C) X).map f = ฮป g, f โซ g := rfl
@[simp] lemma yoneda_map_app {X X' : C} (f : X โถ X') (Y : C) : ((yoneda C).map f) Y = ฮป g, g โซ f := rfl

@[ematch] lemma yoneda_aux_1 {X Y : Cแตแต} (f : X โถ Y) : ((yoneda C).map f) Y (๐ Y) = ((yoneda C) X).map f (๐ X) :=
begin
  dunfold yoneda,
  obviously,
end

section
local attribute [forward] congr_fun
local attribute [forward] nat_trans.naturality
@[simp,ematch] lemma yoneda_aux_2 {X Y : C} (ฮฑ : (yoneda C) X โถ (yoneda C) Y) {Z Z' : C} (f : Z โถ Z') (h : Z' โถ X) : ฮฑ Z (f โซ h) = f โซ ฮฑ Z' h := 
begin
have p := nat_trans.naturality ฮฑ,
  -- have p := ฮฑ.naturality f,
  obviously,
end
end

@[simp,ematch] lemma yoneda_aux_3 {X Y : C} (ฮฑ : (yoneda C) X โถ (yoneda C) Y) {Z : C} (f : Z โถ X) : f โซ ฮฑ X (๐ X) = ฮฑ Z f := by obviously

def yoneda_pairing : (((Cแตแต) โ (Type vโ)) ร (Cแตแต)) โ (Type (max uโ vโ)) := 
let F := (prod.switch ((Cแตแต) โ (Type vโ)) (Cแตแต)) in
let G := (functor.prod ((yoneda C).opposite) (functor.id ((Cแตแต) โ (Type vโ)))) in
let H := (hom_pairing ((Cแตแต) โ (Type vโ))) in
  (F โ G โ H)      

@[simp] lemma yoneda_pairing_map (P Q : (Cแตแต โ Type vโ) ร  (Cแตแต)) (ฮฑ : P โถ Q) (ฮฒ : (yoneda_pairing C) (P.1, P.2)): (yoneda_pairing C).map ฮฑ ฮฒ = (yoneda C).map (ฮฑ.snd) โซ ฮฒ โซ ฮฑ.fst := rfl

def coyoneda : (Cแตแต) โ (C โ (Type vโ)) := 
{ obj := ฮป X,      { obj := ฮป Y, @category.Hom C _ X Y,
                     map := ฮป Y Y' f g, g โซ f },
  map := ฮป X X' f, { app := ฮป Y g, f โซ g } }

@[simp] lemma coyoneda_obj_obj (X Y : C) : ((coyoneda C) X) Y = (X โถ Y) := rfl
@[simp] lemma coyoneda_obj_map (X : C) {Y Y' : C} (f : Y โถ Y') : ((coyoneda C) X).map f = ฮป g, g โซ f := rfl
@[simp] lemma coyoneda_map_app {X X' : C} (f : X โถ X') (Y : C) : ((coyoneda C).map f) Y = ฮป g, f โซ g := rfl

end

variables {C : Type uโ} [๐ : category.{uโ vโ} C]
include ๐

class representable (F : C โ (Type vโ)) := 
(c : C)
(ฮฆ : F โ ((coyoneda C) c))

variable (C)

def yoneda_lemma : (yoneda_pairing C) โ (yoneda_evaluation C) := 
{ hom := { app := ฮป F x, ulift.up ((x.app F.2) (๐ F.2)) },
  inv := { app := ฮป F x, { app := ฮป X a, (F.1.map a) x.down } } }.

instance yoneda_full : full (yoneda C) := 
{ preimage := ฮป X Y f, (f X) (๐ X) }

instance yoneda_faithful : faithful (yoneda C) := by obviously

def yoneda_embedding : embedding (yoneda C) := by obviously

end category_theory.yoneda