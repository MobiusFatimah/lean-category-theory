-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import categories.natural_transformation
import categories.isomorphism
import categories.opposites
import categories.equivalence
import categories.products.switch
import categories.types
import categories.functor_categories.evaluation
import categories.universe_lifting

open categories
open categories.functor
open categories.natural_transformation
open categories.functor_categories
open categories.isomorphism
open categories.equivalence
open categories.types
open categories.products
open categories.opposites

namespace categories.yoneda

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ

section
variables (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C]

-- FIXME why isn't this already available?
instance : category ((C·µí·µñ) ‚Üù Type v‚ÇÅ √ó (C·µí·µñ)) := products.ProductCategory.{(max u‚ÇÅ (v‚ÇÅ+1)) (max u‚ÇÅ v‚ÇÅ) u‚ÇÅ v‚ÇÅ} (C·µí·µñ ‚Üù Type v‚ÇÅ) (C·µí·µñ)

definition YonedaEvaluation 
  : (((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚Üù (Type (max u‚ÇÅ v‚ÇÅ)) 
  := (Evaluation (C·µí·µñ) (Type v‚ÇÅ)) ‚ãô UniverseLift.{v‚ÇÅ u‚ÇÅ}

definition Yoneda : C ‚Üù ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) := 
{ onObjects := Œª X, 
    { onObjects     := Œª Y, @category.Hom C _ Y X,
      onMorphisms   := Œª Y Y' f g, f ‚â´ g },
  onMorphisms   := Œª X X' f, 
    { components := Œª Y g, g ‚â´ f } }

-- FIXME typeclass resolution needs some help.
definition YonedaPairing : (((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚Üù (Type (max u‚ÇÅ v‚ÇÅ)) := 
let F := (SwitchProductCategory ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) (C·µí·µñ)) in
let G := (ProductFunctor (OppositeFunctor (Yoneda C)) (IdentityFunctor ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)))) in
let H := (HomPairing ((C·µí·µñ) ‚Üù (Type v‚ÇÅ))) in
begin
  letI : category (C·µí·µñ √ó (C·µí·µñ ‚Üù Type v‚ÇÅ)) := by apply_instance,
  exact (F ‚ãô G ‚ãô H)      
end

definition CoYoneda (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : (C·µí·µñ) ‚Üù (C ‚Üù (Type v‚ÇÅ)) := 
{ onObjects := Œª X, 
   { onObjects     := Œª Y, @category.Hom C _ X Y,
     onMorphisms   := Œª Y Y' f g, g ‚â´ f },
  onMorphisms   := Œª X X' f,
    { components := Œª Y g, f ‚â´ g } }
end

section
variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

class Representable (F : C ‚Üù (Type v‚ÇÅ)) := 
  (c : C)
  (Œ¶ : F ‚áî ((CoYoneda C) +> c))
end


@[simp] private lemma YonedaLemma_aux_1 {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C] {X Y : C} (f : X ‚ü∂ Y) {F G : (C·µí·µñ) ‚Üù (Type v‚ÇÅ)} (œÑ : F ‚üπ G) (Z : F +> Y) :
     (G &> f) ((œÑ.components Y) Z) = (œÑ.components X) ((F &> f) Z) := eq.symm (congr_fun (œÑ.naturality f) Z)

local attribute [tidy] dsimp_all'

set_option pp.universes true

theorem YonedaLemma (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : (YonedaPairing C) ‚áî (YonedaEvaluation C) := 
{ morphism := { components := Œª F x, ulift.up ((x.components F.2) (ùüô F.2)) },
  inverse  := { components := Œª F x, { components := Œª X a, (F.1 &> a) x.down } } }.

theorem YonedaFull (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : Full (Yoneda C) := 
{ preimage := Œª X Y f, (f.components X) (ùüô X),
  witness := Œª X Y f, begin tidy, have p := congr_fun (f.naturality x) (ùüô X), tidy, end } -- PROJECT a pure rewriting proof?

theorem YonedaFaithful (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C]  : Faithful (Yoneda C) := {
    injectivity := Œª X Y f g w, begin 
                                  -- PROJECT automation
                                  dsimp_all',
                                  have p := congr_arg NaturalTransformation.components w, 
                                  have p' := congr_fun p X, 
                                  have p'' := congr_fun p' (ùüô X),
                                  tidy,
                                end
}

end categories.yoneda