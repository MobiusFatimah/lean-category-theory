-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.natural_transformation
import categories.isomorphism
import categories.opposites
import categories.equivalence
import categories.products.switch
import categories.types
import categories.functor_categories.evaluation
import categories.universe_lifting
import tactic.interactive
import categories.tactics.obviously

open category_theory

namespace category_theory.yoneda

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ

section
variables (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C]

-- We need to help typeclass inference with some awkward universe levels here.
instance instance_1 : category (((C·µí·µñ) ‚Üù Type v‚ÇÅ) √ó (C·µí·µñ)) := category_theory.prod.category.{(max u‚ÇÅ (v‚ÇÅ+1)) (max u‚ÇÅ v‚ÇÅ) u‚ÇÅ v‚ÇÅ} (C·µí·µñ ‚Üù Type v‚ÇÅ) (C·µí·µñ)
instance instance_2 : category ((C·µí·µñ) √ó ((C·µí·µñ) ‚Üù Type v‚ÇÅ)) := category_theory.prod.category.{u‚ÇÅ v‚ÇÅ (max u‚ÇÅ (v‚ÇÅ+1)) (max u‚ÇÅ v‚ÇÅ)} (C·µí·µñ) (C·µí·µñ ‚Üù Type v‚ÇÅ) 

definition yoneda_evaluation : (((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚Üù (Type (max u‚ÇÅ v‚ÇÅ)) 
  := (evaluation (C·µí·µñ) (Type v‚ÇÅ)) ‚ãô type_lift.{v‚ÇÅ u‚ÇÅ}

-- FIXME hmmm.
open tactic.interactive
meta def unfold_coes' := `[unfold_coes]
local attribute [tidy] unfold_coes'

definition yoneda : C ‚Üù ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) := 
{ obj := Œª X, 
    { obj := Œª Y, @category.Hom C _ Y X,
      map := Œª Y Y' f g, f ‚â´ g },
  map := Œª X X' f, 
    { app := Œª Y g, g ‚â´ f } }

-- FIXME typeclass resolution needs some help.
definition yoneda_pairing : (((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚Üù (Type (max u‚ÇÅ v‚ÇÅ)) := 
let F := (ProductCategory.switch ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)) (C·µí·µñ)) in
let G := (functor.prod ((yoneda C).opposite) (functor.id ((C·µí·µñ) ‚Üù (Type v‚ÇÅ)))) in
let H := (hom_pairing ((C·µí·µñ) ‚Üù (Type v‚ÇÅ))) in
  (F ‚ãô G ‚ãô H)      


definition coyoneda (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : (C·µí·µñ) ‚Üù (C ‚Üù (Type v‚ÇÅ)) := 
{ obj := Œª X, 
   { obj := Œª Y, @category.Hom C _ X Y,
     map := Œª Y Y' f g, g ‚â´ f },
  map := Œª X X' f,
    { app := Œª Y g, f ‚â´ g } }
end

section
variable {C : Type u‚ÇÅ}
variable [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

class Representable (F : C ‚Üù (Type v‚ÇÅ)) := 
(c : C)
(Œ¶ : F ‚áî ((coyoneda C) c))

end

@[simp] private lemma YonedaLemma_aux_1 {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C] {X Y : C} (f : X ‚ü∂ Y) {F G : (C·µí·µñ) ‚Üù (Type v‚ÇÅ)} (œÑ : F ‚üπ G) (Z : F Y) :
     (G.map f) ((œÑ Y) Z) = (œÑ X) ((F.map f) Z) := eq.symm (congr_fun (œÑ.naturality f) Z)

local attribute [tidy] dsimp_all'

set_option pp.universes true

-- FIXME
def YonedaLemma (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : (yoneda_pairing C) ‚áî (yoneda_evaluation C) := 
{ map := { app := Œª F x, ulift.up ((x.app F.2) (ùüô F.2)), naturality := by sorry },
  inv := { app := Œª F x, { app := Œª X a, (F.1.map a) x.down }, naturality := by sorry },
  map_inv_id := sorry }.

def YonedaFull (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] : Full (yoneda C) := 
{ preimage := Œª X Y f, (f X) (ùüô X),
  witness := Œª X Y f, begin tidy, have p := congr_fun (f.naturality x) (ùüô X), tidy, end } -- PROJECT a pure rewriting proof?

def YonedaFaithful (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C]  : Faithful (yoneda C) := {
    injectivity := Œª X Y f g w, begin 
                                  -- PROJECT automation
                                  dsimp_all',
                                  have p := congr_arg nat_trans.app w, 
                                  have p' := congr_fun p X, 
                                  have p'' := congr_fun p' (ùüô X),
                                  tidy,
                                end
}

end category_theory.yoneda