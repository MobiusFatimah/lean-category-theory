-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import categories.products.bifunctors
import categories.equivalence

namespace category_theory

universes u‚ÇÅ u‚ÇÇ v‚ÇÇ 

variables (C : Type u‚ÇÅ) [small_category C] (D : Type u‚ÇÅ) [small_category D] (E : Type u‚ÇÇ) [‚Ñ∞ : category.{u‚ÇÇ v‚ÇÇ} E]
include ‚Ñ∞

definition uncurry : (C ‚Üù (D ‚Üù E)) ‚Üù ((C √ó D) ‚Üù E) := 
{ obj := Œª F, { obj := Œª X, (F X.1) X.2,
                map := Œª X Y f, ((F.map f.1) X.2) ‚â´ ((F Y.1).map f.2) },
  map := Œª F G T, { app := Œª X, (T X.1) X.2 } }

definition curry : ((C √ó D) ‚Üù E) ‚Üù (C ‚Üù (D ‚Üù E)) := 
{ obj := Œª F, { obj := Œª X, { obj := Œª Y, F (X, Y),
                              map := Œª Y Y' g, F.map (ùüô X, g) },
                map := Œª X X' f, { app := Œª Y, F.map (f, ùüô Y) } },
  map := Œª F G T, { app := Œª X, { app := Œª Y, T (X, Y) } } }

local attribute [backwards] category.id -- this is usually a bad idea, but just what we needed here

def currying : Equivalence (C ‚Üù (D ‚Üù E)) ((C √ó D) ‚Üù E) := 
{ functor := uncurry C D E,
  inverse := curry C D E }

end category_theory