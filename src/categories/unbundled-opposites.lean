universes u u‚ÇÅ u‚ÇÇ u‚ÇÉ 

class category (Obj : Type u) :=
  (Hom : Obj ‚Üí Obj ‚Üí Type u)
  (identity : Œ† X : Obj, Hom X X)
  (compose  : Œ† {X Y Z : Obj}, Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z)
  
section
variable {C : Type u}
variables {W X Y Z : C}
variable [category C]

def Hom : C ‚Üí C ‚Üí Type u := category.Hom

notation `ùüô` := category.identity
infixr ` >> `:80 := category.compose
end

structure Functor (C : Type u‚ÇÅ) (D : Type u‚ÇÇ) [category C] [category D] :=
  (onObjects   : C ‚Üí D)
  (onMorphisms : Œ† {X Y : C},
                Hom X Y ‚Üí Hom (onObjects X) (onObjects Y))
  (identities : ‚àÄ (X : C),
    onMorphisms (ùüô X) = ùüô (onObjects X))
  (functoriality : ‚àÄ {X Y Z : C} (f : Hom X Y) (g : Hom Y Z),
    onMorphisms (f >> g) = (onMorphisms f) >> (onMorphisms g))

attribute [simp,ematch] Functor.identities
attribute [simp,ematch] Functor.functoriality

variable {C : Type u‚ÇÅ}
variable {D : Type u‚ÇÇ}
variable [category C]
variable [category D]
instance ProductCategory : category (C √ó D) := {
    Hom      := (Œª X Y : C √ó D, Hom (X.1) (Y.1) √ó Hom (X.2) (Y.2)),
    identity := Œª X, ‚ü® ùüô (X.1), ùüô (X.2) ‚ü©,
    compose  := Œª _ _ _ f g, (f.1 >> g.1, f.2 >> g.2)
 }

instance CategoryOfTypes : category.{u+1} (Type u) := {
    Hom := Œª a b, ulift.{u+1} (a ‚Üí b),
    identity := Œª a, ulift.up id,
    compose  := Œª _ _ _ f g, ulift.up (g.down ‚àò f.down)
}

inductive op (C : Type u‚ÇÅ) : Type u‚ÇÅ
| op : C ‚Üí op

notation C `·µí·µñ` := op C

def op.of : C·µí·µñ  ‚Üí C
| (op.op X) := X

instance opposite_coercion_1 : has_coe (C·µí·µñ) C :=
  {coe := op.of}
instance opposite_coercion_2 : has_coe C (C·µí·µñ) :=
  {coe := op.op}

instance Opposite : category (C·µí·µñ):= {
    Hom := Œª X Y : C·µí·µñ, Hom (Y : C) (X : C),
    compose  := Œª _ _ _ f g, g >> f,
    identity := Œª X, ùüô X
}

definition HomPairing {C : Type u‚ÇÅ} [C_cat : category C]: Functor ((C·µí·µñ) √ó C) (Type u‚ÇÅ) := {
  onObjects     := Œª p, @Hom C _ p.1 p.2,
  onMorphisms   := Œª X Y f, sorry,
  identities    := sorry,
  functoriality := sorry
}